
F411_nucleo_IIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034f8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003690  08003690  00013690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a8  080036a8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080036a8  080036a8  000136a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036b0  080036b0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036b0  080036b0  000136b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036b4  080036b4  000136b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080036b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000091fc  20000098  08003750  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009294  08003750  00029294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088c4  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1d  00000000  00000000  0002898c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  0002ab90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015822  00000000  00000000  0002b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000093aa  00000000  00000000  000409aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085638  00000000  00000000  00049d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  000cf38c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ac  00000000  00000000  000cf450  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000005f0  00000000  00000000  000d0dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003678 	.word	0x08003678

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08003678 	.word	0x08003678

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d6:	f000 fce5 	bl	8000ea4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004da:	f000 f9f9 	bl	80008d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004de:	f000 fab7 	bl	8000a50 <MX_GPIO_Init>
	MX_DMA_Init();
 80004e2:	f000 fa8d 	bl	8000a00 <MX_DMA_Init>
	MX_I2S2_Init();
 80004e6:	f000 fa5b 	bl	80009a0 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */

	/* init IIR structure */
	arm_biquad_cascade_df1_init_f32(&EQ_HP, NUMSTAGES, &eq_coeff_hp[0], &eq_hp_state[0]); 	// HP
 80004ea:	4ba7      	ldr	r3, [pc, #668]	; (8000788 <main+0x2b8>)
 80004ec:	4aa7      	ldr	r2, [pc, #668]	; (800078c <main+0x2bc>)
 80004ee:	2101      	movs	r1, #1
 80004f0:	48a7      	ldr	r0, [pc, #668]	; (8000790 <main+0x2c0>)
 80004f2:	f002 ffb9 	bl	8003468 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&EQ_LP, NUMSTAGES, &eq_coeff_lp[0], &eq_lp_state[0]);	// LP
 80004f6:	4ba7      	ldr	r3, [pc, #668]	; (8000794 <main+0x2c4>)
 80004f8:	4aa7      	ldr	r2, [pc, #668]	; (8000798 <main+0x2c8>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	48a7      	ldr	r0, [pc, #668]	; (800079c <main+0x2cc>)
 80004fe:	f002 ffb3 	bl	8003468 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&EQ_1, NUMSTAGES, &eq_coeff_1[0], &eq_1_state[0]);		// PK1
 8000502:	4ba7      	ldr	r3, [pc, #668]	; (80007a0 <main+0x2d0>)
 8000504:	4aa7      	ldr	r2, [pc, #668]	; (80007a4 <main+0x2d4>)
 8000506:	2101      	movs	r1, #1
 8000508:	48a7      	ldr	r0, [pc, #668]	; (80007a8 <main+0x2d8>)
 800050a:	f002 ffad 	bl	8003468 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&EQ_2, NUMSTAGES, &eq_coeff_2[0], &eq_2_state[0]);		// PK2
 800050e:	4ba7      	ldr	r3, [pc, #668]	; (80007ac <main+0x2dc>)
 8000510:	4aa7      	ldr	r2, [pc, #668]	; (80007b0 <main+0x2e0>)
 8000512:	2101      	movs	r1, #1
 8000514:	48a7      	ldr	r0, [pc, #668]	; (80007b4 <main+0x2e4>)
 8000516:	f002 ffa7 	bl	8003468 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&EQ_3, NUMSTAGES, &eq_coeff_3[0], &eq_3_state[0]);		// PK3
 800051a:	4ba7      	ldr	r3, [pc, #668]	; (80007b8 <main+0x2e8>)
 800051c:	4aa7      	ldr	r2, [pc, #668]	; (80007bc <main+0x2ec>)
 800051e:	2101      	movs	r1, #1
 8000520:	48a7      	ldr	r0, [pc, #668]	; (80007c0 <main+0x2f0>)
 8000522:	f002 ffa1 	bl	8003468 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&EQ_4, NUMSTAGES, &eq_coeff_4[0], &eq_4_state[0]);		// PK4
 8000526:	4ba7      	ldr	r3, [pc, #668]	; (80007c4 <main+0x2f4>)
 8000528:	4aa7      	ldr	r2, [pc, #668]	; (80007c8 <main+0x2f8>)
 800052a:	2101      	movs	r1, #1
 800052c:	48a7      	ldr	r0, [pc, #668]	; (80007cc <main+0x2fc>)
 800052e:	f002 ff9b 	bl	8003468 <arm_biquad_cascade_df1_init_f32>
	arm_biquad_cascade_df1_init_f32(&EQ_5, NUMSTAGES, &eq_coeff_5[0], &eq_5_state[0]);		// PK5
 8000532:	4ba7      	ldr	r3, [pc, #668]	; (80007d0 <main+0x300>)
 8000534:	4aa7      	ldr	r2, [pc, #668]	; (80007d4 <main+0x304>)
 8000536:	2101      	movs	r1, #1
 8000538:	48a7      	ldr	r0, [pc, #668]	; (80007d8 <main+0x308>)
 800053a:	f002 ff95 	bl	8003468 <arm_biquad_cascade_df1_init_f32>

	/* start i2s with 2048 samples transmission => 4096*u16 words */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 800053e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000542:	4aa6      	ldr	r2, [pc, #664]	; (80007dc <main+0x30c>)
 8000544:	49a6      	ldr	r1, [pc, #664]	; (80007e0 <main+0x310>)
 8000546:	48a7      	ldr	r0, [pc, #668]	; (80007e4 <main+0x314>)
 8000548:	f001 fd6a 	bl	8002020 <HAL_I2SEx_TransmitReceive_DMA>
	/* USER CODE BEGIN WHILE */
//	int l_sample[BLOCK_SIZE_FLOAT * 2];
//	int r_sample[BLOCK_SIZE_FLOAT * 2];

	while (1) {
		if (callback_state != 0) {
 800054c:	4ba6      	ldr	r3, [pc, #664]	; (80007e8 <main+0x318>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0fb      	beq.n	800054c <main+0x7c>

			/* decide if it was half or cplt callback */
			if (callback_state == 1) {
 8000554:	4ba4      	ldr	r3, [pc, #656]	; (80007e8 <main+0x318>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b01      	cmp	r3, #1
 800055a:	d109      	bne.n	8000570 <main+0xa0>
				offset_r_ptr = 0;
 800055c:	4ba3      	ldr	r3, [pc, #652]	; (80007ec <main+0x31c>)
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
				offset_w_ptr = 0;
 8000562:	4ba3      	ldr	r3, [pc, #652]	; (80007f0 <main+0x320>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
				w_ptr = 0;
 8000568:	4ba2      	ldr	r3, [pc, #648]	; (80007f4 <main+0x324>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	e00f      	b.n	8000590 <main+0xc0>
			} else if (callback_state == 2) {
 8000570:	4b9d      	ldr	r3, [pc, #628]	; (80007e8 <main+0x318>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d10b      	bne.n	8000590 <main+0xc0>
				offset_r_ptr = BLOCK_SIZE_U16;
 8000578:	4b9c      	ldr	r3, [pc, #624]	; (80007ec <main+0x31c>)
 800057a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800057e:	601a      	str	r2, [r3, #0]
				offset_w_ptr = BLOCK_SIZE_FLOAT;
 8000580:	4b9b      	ldr	r3, [pc, #620]	; (80007f0 <main+0x320>)
 8000582:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000586:	601a      	str	r2, [r3, #0]
				w_ptr = BLOCK_SIZE_FLOAT;
 8000588:	4b9a      	ldr	r3, [pc, #616]	; (80007f4 <main+0x324>)
 800058a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800058e:	601a      	str	r2, [r3, #0]
//				w_ptr++;
//			}


			/* restore input (signed 24 bit??) sample buffer to float array */
			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4) {
 8000590:	4b96      	ldr	r3, [pc, #600]	; (80007ec <main+0x31c>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	e034      	b.n	8000602 <main+0x132>
				l_buf_in[w_ptr] = (float) ((int) (rxBuf[i] << 16) | rxBuf[i + 1]);
 8000598:	4a90      	ldr	r2, [pc, #576]	; (80007dc <main+0x30c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a0:	041b      	lsls	r3, r3, #16
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	3201      	adds	r2, #1
 80005a6:	498d      	ldr	r1, [pc, #564]	; (80007dc <main+0x30c>)
 80005a8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80005ac:	431a      	orrs	r2, r3
 80005ae:	4b91      	ldr	r3, [pc, #580]	; (80007f4 <main+0x324>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	ee07 2a90 	vmov	s15, r2
 80005b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ba:	4a8f      	ldr	r2, [pc, #572]	; (80007f8 <main+0x328>)
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	edc3 7a00 	vstr	s15, [r3]
				r_buf_in[w_ptr] = (float) ((int) (rxBuf[i + 2] << 16) | rxBuf[i + 3]);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	3302      	adds	r3, #2
 80005c8:	4a84      	ldr	r2, [pc, #528]	; (80007dc <main+0x30c>)
 80005ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005ce:	041b      	lsls	r3, r3, #16
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	3203      	adds	r2, #3
 80005d4:	4981      	ldr	r1, [pc, #516]	; (80007dc <main+0x30c>)
 80005d6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80005da:	431a      	orrs	r2, r3
 80005dc:	4b85      	ldr	r3, [pc, #532]	; (80007f4 <main+0x324>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	ee07 2a90 	vmov	s15, r2
 80005e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e8:	4a84      	ldr	r2, [pc, #528]	; (80007fc <main+0x32c>)
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	edc3 7a00 	vstr	s15, [r3]
				w_ptr++;
 80005f2:	4b80      	ldr	r3, [pc, #512]	; (80007f4 <main+0x324>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3301      	adds	r3, #1
 80005f8:	4a7e      	ldr	r2, [pc, #504]	; (80007f4 <main+0x324>)
 80005fa:	6013      	str	r3, [r2, #0]
			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3304      	adds	r3, #4
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <main+0x31c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	429a      	cmp	r2, r3
 800060e:	ddc3      	ble.n	8000598 <main+0xc8>
			}


			/* process IIR */
			arm_biquad_cascade_df1_f32(&EQ_1, &l_buf_in[offset_w_ptr], &l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 8000610:	4b77      	ldr	r3, [pc, #476]	; (80007f0 <main+0x320>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4a78      	ldr	r2, [pc, #480]	; (80007f8 <main+0x328>)
 8000618:	1899      	adds	r1, r3, r2
 800061a:	4b75      	ldr	r3, [pc, #468]	; (80007f0 <main+0x320>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4a77      	ldr	r2, [pc, #476]	; (8000800 <main+0x330>)
 8000622:	441a      	add	r2, r3
 8000624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000628:	485f      	ldr	r0, [pc, #380]	; (80007a8 <main+0x2d8>)
 800062a:	f002 ff29 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_2, &l_buf_out[offset_w_ptr], &l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 800062e:	4b70      	ldr	r3, [pc, #448]	; (80007f0 <main+0x320>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	009b      	lsls	r3, r3, #2
 8000634:	4a72      	ldr	r2, [pc, #456]	; (8000800 <main+0x330>)
 8000636:	1899      	adds	r1, r3, r2
 8000638:	4b6d      	ldr	r3, [pc, #436]	; (80007f0 <main+0x320>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	4a70      	ldr	r2, [pc, #448]	; (8000800 <main+0x330>)
 8000640:	441a      	add	r2, r3
 8000642:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000646:	485b      	ldr	r0, [pc, #364]	; (80007b4 <main+0x2e4>)
 8000648:	f002 ff1a 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_3, &l_buf_out[offset_w_ptr], &l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 800064c:	4b68      	ldr	r3, [pc, #416]	; (80007f0 <main+0x320>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4a6b      	ldr	r2, [pc, #428]	; (8000800 <main+0x330>)
 8000654:	1899      	adds	r1, r3, r2
 8000656:	4b66      	ldr	r3, [pc, #408]	; (80007f0 <main+0x320>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	4a68      	ldr	r2, [pc, #416]	; (8000800 <main+0x330>)
 800065e:	441a      	add	r2, r3
 8000660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000664:	4856      	ldr	r0, [pc, #344]	; (80007c0 <main+0x2f0>)
 8000666:	f002 ff0b 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_4, &l_buf_out[offset_w_ptr], &l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 800066a:	4b61      	ldr	r3, [pc, #388]	; (80007f0 <main+0x320>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4a63      	ldr	r2, [pc, #396]	; (8000800 <main+0x330>)
 8000672:	1899      	adds	r1, r3, r2
 8000674:	4b5e      	ldr	r3, [pc, #376]	; (80007f0 <main+0x320>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4a61      	ldr	r2, [pc, #388]	; (8000800 <main+0x330>)
 800067c:	441a      	add	r2, r3
 800067e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000682:	4852      	ldr	r0, [pc, #328]	; (80007cc <main+0x2fc>)
 8000684:	f002 fefc 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_5, &l_buf_out[offset_w_ptr], &l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 8000688:	4b59      	ldr	r3, [pc, #356]	; (80007f0 <main+0x320>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4a5c      	ldr	r2, [pc, #368]	; (8000800 <main+0x330>)
 8000690:	1899      	adds	r1, r3, r2
 8000692:	4b57      	ldr	r3, [pc, #348]	; (80007f0 <main+0x320>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4a59      	ldr	r2, [pc, #356]	; (8000800 <main+0x330>)
 800069a:	441a      	add	r2, r3
 800069c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006a0:	484d      	ldr	r0, [pc, #308]	; (80007d8 <main+0x308>)
 80006a2:	f002 feed 	bl	8003480 <arm_biquad_cascade_df1_f32>

			arm_biquad_cascade_df1_f32(&EQ_1, &r_buf_in[offset_w_ptr], &r_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 80006a6:	4b52      	ldr	r3, [pc, #328]	; (80007f0 <main+0x320>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	4a53      	ldr	r2, [pc, #332]	; (80007fc <main+0x32c>)
 80006ae:	1899      	adds	r1, r3, r2
 80006b0:	4b4f      	ldr	r3, [pc, #316]	; (80007f0 <main+0x320>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	4a53      	ldr	r2, [pc, #332]	; (8000804 <main+0x334>)
 80006b8:	441a      	add	r2, r3
 80006ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006be:	483a      	ldr	r0, [pc, #232]	; (80007a8 <main+0x2d8>)
 80006c0:	f002 fede 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_2, &r_buf_out[offset_w_ptr], &r_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 80006c4:	4b4a      	ldr	r3, [pc, #296]	; (80007f0 <main+0x320>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4a4e      	ldr	r2, [pc, #312]	; (8000804 <main+0x334>)
 80006cc:	1899      	adds	r1, r3, r2
 80006ce:	4b48      	ldr	r3, [pc, #288]	; (80007f0 <main+0x320>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4a4b      	ldr	r2, [pc, #300]	; (8000804 <main+0x334>)
 80006d6:	441a      	add	r2, r3
 80006d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006dc:	4835      	ldr	r0, [pc, #212]	; (80007b4 <main+0x2e4>)
 80006de:	f002 fecf 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_3, &r_buf_out[offset_w_ptr], &r_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 80006e2:	4b43      	ldr	r3, [pc, #268]	; (80007f0 <main+0x320>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4a46      	ldr	r2, [pc, #280]	; (8000804 <main+0x334>)
 80006ea:	1899      	adds	r1, r3, r2
 80006ec:	4b40      	ldr	r3, [pc, #256]	; (80007f0 <main+0x320>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	4a44      	ldr	r2, [pc, #272]	; (8000804 <main+0x334>)
 80006f4:	441a      	add	r2, r3
 80006f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006fa:	4831      	ldr	r0, [pc, #196]	; (80007c0 <main+0x2f0>)
 80006fc:	f002 fec0 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_4, &r_buf_out[offset_w_ptr], &r_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 8000700:	4b3b      	ldr	r3, [pc, #236]	; (80007f0 <main+0x320>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4a3f      	ldr	r2, [pc, #252]	; (8000804 <main+0x334>)
 8000708:	1899      	adds	r1, r3, r2
 800070a:	4b39      	ldr	r3, [pc, #228]	; (80007f0 <main+0x320>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4a3c      	ldr	r2, [pc, #240]	; (8000804 <main+0x334>)
 8000712:	441a      	add	r2, r3
 8000714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000718:	482c      	ldr	r0, [pc, #176]	; (80007cc <main+0x2fc>)
 800071a:	f002 feb1 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_5, &r_buf_out[offset_w_ptr], &r_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 800071e:	4b34      	ldr	r3, [pc, #208]	; (80007f0 <main+0x320>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4a37      	ldr	r2, [pc, #220]	; (8000804 <main+0x334>)
 8000726:	1899      	adds	r1, r3, r2
 8000728:	4b31      	ldr	r3, [pc, #196]	; (80007f0 <main+0x320>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4a35      	ldr	r2, [pc, #212]	; (8000804 <main+0x334>)
 8000730:	441a      	add	r2, r3
 8000732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <main+0x308>)
 8000738:	f002 fea2 	bl	8003480 <arm_biquad_cascade_df1_f32>


			arm_biquad_cascade_df1_f32(&EQ_HP, &l_buf_out[offset_w_ptr], &l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 800073c:	4b2c      	ldr	r3, [pc, #176]	; (80007f0 <main+0x320>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	4a2f      	ldr	r2, [pc, #188]	; (8000800 <main+0x330>)
 8000744:	1899      	adds	r1, r3, r2
 8000746:	4b2a      	ldr	r3, [pc, #168]	; (80007f0 <main+0x320>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <main+0x330>)
 800074e:	441a      	add	r2, r3
 8000750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000754:	480e      	ldr	r0, [pc, #56]	; (8000790 <main+0x2c0>)
 8000756:	f002 fe93 	bl	8003480 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&EQ_LP, &r_buf_out[offset_w_ptr], &r_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 800075a:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <main+0x320>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4a28      	ldr	r2, [pc, #160]	; (8000804 <main+0x334>)
 8000762:	1899      	adds	r1, r3, r2
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <main+0x320>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4a26      	ldr	r2, [pc, #152]	; (8000804 <main+0x334>)
 800076c:	441a      	add	r2, r3
 800076e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000772:	480a      	ldr	r0, [pc, #40]	; (800079c <main+0x2cc>)
 8000774:	f002 fe84 	bl	8003480 <arm_biquad_cascade_df1_f32>

			/* restore processed float-array to output sample-buffer */
			w_ptr = offset_w_ptr;
 8000778:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <main+0x320>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a1d      	ldr	r2, [pc, #116]	; (80007f4 <main+0x324>)
 800077e:	6013      	str	r3, [r2, #0]

			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4) {
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <main+0x31c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	603b      	str	r3, [r7, #0]
 8000786:	e08c      	b.n	80008a2 <main+0x3d2>
 8000788:	200000b4 	.word	0x200000b4
 800078c:	20000000 	.word	0x20000000
 8000790:	20009284 	.word	0x20009284
 8000794:	200000c4 	.word	0x200000c4
 8000798:	20000014 	.word	0x20000014
 800079c:	20008150 	.word	0x20008150
 80007a0:	200000d4 	.word	0x200000d4
 80007a4:	20000028 	.word	0x20000028
 80007a8:	2000816c 	.word	0x2000816c
 80007ac:	200000e4 	.word	0x200000e4
 80007b0:	2000003c 	.word	0x2000003c
 80007b4:	20005138 	.word	0x20005138
 80007b8:	200000f4 	.word	0x200000f4
 80007bc:	20000050 	.word	0x20000050
 80007c0:	20001128 	.word	0x20001128
 80007c4:	20000104 	.word	0x20000104
 80007c8:	20000064 	.word	0x20000064
 80007cc:	2000815c 	.word	0x2000815c
 80007d0:	20000114 	.word	0x20000114
 80007d4:	20000078 	.word	0x20000078
 80007d8:	20005144 	.word	0x20005144
 80007dc:	20006150 	.word	0x20006150
 80007e0:	20002138 	.word	0x20002138
 80007e4:	2000823c 	.word	0x2000823c
 80007e8:	20000124 	.word	0x20000124
 80007ec:	20008178 	.word	0x20008178
 80007f0:	20008168 	.word	0x20008168
 80007f4:	20002134 	.word	0x20002134
 80007f8:	20004138 	.word	0x20004138
 80007fc:	20008284 	.word	0x20008284
 8000800:	20005150 	.word	0x20005150
 8000804:	20001134 	.word	0x20001134
				txBuf[i] = (((int) l_buf_out[w_ptr]) >> 16) & 0xFFFF;
 8000808:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <main+0x3e8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a2b      	ldr	r2, [pc, #172]	; (80008bc <main+0x3ec>)
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	4413      	add	r3, r2
 8000812:	edd3 7a00 	vldr	s15, [r3]
 8000816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800081a:	ee17 3a90 	vmov	r3, s15
 800081e:	0c1b      	lsrs	r3, r3, #16
 8000820:	b299      	uxth	r1, r3
 8000822:	4a27      	ldr	r2, [pc, #156]	; (80008c0 <main+0x3f0>)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i + 1] = ((int) l_buf_out[w_ptr]) & 0xFFFF;
 800082a:	4b23      	ldr	r3, [pc, #140]	; (80008b8 <main+0x3e8>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <main+0x3ec>)
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	edd3 7a00 	vldr	s15, [r3]
 8000838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	ee17 2a90 	vmov	r2, s15
 8000844:	b291      	uxth	r1, r2
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <main+0x3f0>)
 8000848:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i + 2] = (((int) r_buf_out[w_ptr]) >> 16) & 0xFFFF;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <main+0x3e8>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <main+0x3f4>)
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	edd3 7a00 	vldr	s15, [r3]
 800085a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800085e:	ee17 3a90 	vmov	r3, s15
 8000862:	0c1a      	lsrs	r2, r3, #16
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	3302      	adds	r3, #2
 8000868:	b291      	uxth	r1, r2
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <main+0x3f0>)
 800086c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i + 3] = ((int) r_buf_out[w_ptr]) & 0xFFFF;
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main+0x3e8>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a13      	ldr	r2, [pc, #76]	; (80008c4 <main+0x3f4>)
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	edd3 7a00 	vldr	s15, [r3]
 800087e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	3303      	adds	r3, #3
 8000886:	ee17 2a90 	vmov	r2, s15
 800088a:	b291      	uxth	r1, r2
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <main+0x3f0>)
 800088e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				w_ptr++;
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <main+0x3e8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	3301      	adds	r3, #1
 8000898:	4a07      	ldr	r2, [pc, #28]	; (80008b8 <main+0x3e8>)
 800089a:	6013      	str	r3, [r2, #0]
			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16; i = i + 4) {
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	3304      	adds	r3, #4
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <main+0x3f8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	ddab      	ble.n	8000808 <main+0x338>
			}

			callback_state = 0;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <main+0x3fc>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	701a      	strb	r2, [r3, #0]
		if (callback_state != 0) {
 80008b6:	e649      	b.n	800054c <main+0x7c>
 80008b8:	20002134 	.word	0x20002134
 80008bc:	20005150 	.word	0x20005150
 80008c0:	20002138 	.word	0x20002138
 80008c4:	20001134 	.word	0x20001134
 80008c8:	20008178 	.word	0x20008178
 80008cc:	20000124 	.word	0x20000124

080008d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b094      	sub	sp, #80	; 0x50
 80008d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80008d6:	f107 0320 	add.w	r3, r7, #32
 80008da:	2230      	movs	r2, #48	; 0x30
 80008dc:	2100      	movs	r1, #0
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 fec2 	bl	8003668 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008f4:	2300      	movs	r3, #0
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <SystemClock_Config+0xc8>)
 80008fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fc:	4a26      	ldr	r2, [pc, #152]	; (8000998 <SystemClock_Config+0xc8>)
 80008fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000902:	6413      	str	r3, [r2, #64]	; 0x40
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <SystemClock_Config+0xc8>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	4b21      	ldr	r3, [pc, #132]	; (800099c <SystemClock_Config+0xcc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a20      	ldr	r2, [pc, #128]	; (800099c <SystemClock_Config+0xcc>)
 800091a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <SystemClock_Config+0xcc>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000940:	2304      	movs	r3, #4
 8000942:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000944:	2364      	movs	r3, #100	; 0x64
 8000946:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800094c:	2304      	movs	r3, #4
 800094e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fff7 	bl	8002948 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0x94>
		Error_Handler();
 8000960:	f000 f8da 	bl	8000b18 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000964:	230f      	movs	r3, #15
 8000966:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	2103      	movs	r1, #3
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fa59 	bl	8002e38 <HAL_RCC_ClockConfig>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <SystemClock_Config+0xc0>
		Error_Handler();
 800098c:	f000 f8c4 	bl	8000b18 <Error_Handler>
	}
}
 8000990:	bf00      	nop
 8000992:	3750      	adds	r7, #80	; 0x50
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009a6:	4a14      	ldr	r2, [pc, #80]	; (80009f8 <MX_I2S2_Init+0x58>)
 80009a8:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b0:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009ba:	2203      	movs	r2, #3
 80009bc:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c4:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009c8:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <MX_I2S2_Init+0x5c>)
 80009ca:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009da:	2201      	movs	r2, #1
 80009dc:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_I2S2_Init+0x54>)
 80009e0:	f001 f8d8 	bl	8001b94 <HAL_I2S_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2S2_Init+0x4e>
		Error_Handler();
 80009ea:	f000 f895 	bl	8000b18 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000823c 	.word	0x2000823c
 80009f8:	40003800 	.word	0x40003800
 80009fc:	00017700 	.word	0x00017700

08000a00 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	607b      	str	r3, [r7, #4]
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0f      	ldr	r2, [pc, #60]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <MX_DMA_Init+0x4c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	200e      	movs	r0, #14
 8000a28:	f000 fb89 	bl	800113e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a2c:	200e      	movs	r0, #14
 8000a2e:	f000 fba2 	bl	8001176 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	200f      	movs	r0, #15
 8000a38:	f000 fb81 	bl	800113e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a3c:	200f      	movs	r0, #15
 8000a3e:	f000 fb9a 	bl	8001176 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	6313      	str	r3, [r2, #48]	; 0x30
 8000a66:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	6313      	str	r3, [r2, #48]	; 0x30
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_GPIO_Init+0x84>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

}
 8000ac6:	bf00      	nop
 8000ac8:	3714      	adds	r7, #20
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	701a      	strb	r2, [r3, #0]

}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000124 	.word	0x20000124

08000af8 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	callback_state = 2;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	701a      	strb	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000124 	.word	0x20000124

08000b18 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1c:	b672      	cpsid	i
}
 8000b1e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b20:	e7fe      	b.n	8000b20 <Error_Handler+0x8>
	...

08000b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b38:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	603b      	str	r3, [r7, #0]
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b54:	6413      	str	r3, [r2, #64]	; 0x40
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b62:	2007      	movs	r0, #7
 8000b64:	f000 fae0 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40023800 	.word	0x40023800

08000b74 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b092      	sub	sp, #72	; 0x48
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
 8000b9c:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a7a      	ldr	r2, [pc, #488]	; (8000d8c <HAL_I2S_MspInit+0x218>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	f040 80ec 	bne.w	8000d82 <HAL_I2S_MspInit+0x20e>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bae:	23c0      	movs	r3, #192	; 0xc0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000bb2:	2308      	movs	r3, #8
 8000bb4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bba:	f107 031c 	add.w	r3, r7, #28
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fb02 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000bca:	f7ff ffa5 	bl	8000b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	4b6f      	ldr	r3, [pc, #444]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	4a6e      	ldr	r2, [pc, #440]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bde:	4b6c      	ldr	r3, [pc, #432]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	61bb      	str	r3, [r7, #24]
 8000be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	4b68      	ldr	r3, [pc, #416]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a67      	ldr	r2, [pc, #412]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000bf4:	f043 0304 	orr.w	r3, r3, #4
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b65      	ldr	r3, [pc, #404]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
 8000c0a:	4b61      	ldr	r3, [pc, #388]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a60      	ldr	r2, [pc, #384]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b5e      	ldr	r3, [pc, #376]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	4b5a      	ldr	r3, [pc, #360]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a59      	ldr	r2, [pc, #356]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000c2c:	f043 0302 	orr.w	r3, r3, #2
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b57      	ldr	r3, [pc, #348]	; (8000d90 <HAL_I2S_MspInit+0x21c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> I2S2_SD
    PA6     ------> I2S2_MCK
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000c4e:	2306      	movs	r3, #6
 8000c50:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c56:	4619      	mov	r1, r3
 8000c58:	484e      	ldr	r0, [pc, #312]	; (8000d94 <HAL_I2S_MspInit+0x220>)
 8000c5a:	f000 fe17 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c5e:	2308      	movs	r3, #8
 8000c60:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c76:	4619      	mov	r1, r3
 8000c78:	4846      	ldr	r0, [pc, #280]	; (8000d94 <HAL_I2S_MspInit+0x220>)
 8000c7a:	f000 fe07 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c82:	2302      	movs	r3, #2
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000c8e:	2306      	movs	r3, #6
 8000c90:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c96:	4619      	mov	r1, r3
 8000c98:	483f      	ldr	r0, [pc, #252]	; (8000d98 <HAL_I2S_MspInit+0x224>)
 8000c9a:	f000 fdf7 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000c9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ca2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cb0:	2305      	movs	r3, #5
 8000cb2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4838      	ldr	r0, [pc, #224]	; (8000d9c <HAL_I2S_MspInit+0x228>)
 8000cbc:	f000 fde6 	bl	800188c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000cc0:	4b37      	ldr	r3, [pc, #220]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cc2:	4a38      	ldr	r2, [pc, #224]	; (8000da4 <HAL_I2S_MspInit+0x230>)
 8000cc4:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cc8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ccc:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cce:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cd4:	4b32      	ldr	r3, [pc, #200]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cda:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ce0:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce8:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cf0:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf8:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfa:	4b29      	ldr	r3, [pc, #164]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000d06:	4826      	ldr	r0, [pc, #152]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000d08:	f000 fa50 	bl	80011ac <HAL_DMA_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2S_MspInit+0x1a2>
    {
      Error_Handler();
 8000d12:	f7ff ff01 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a21      	ldr	r2, [pc, #132]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000d1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <HAL_I2S_MspInit+0x22c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d24:	4a21      	ldr	r2, [pc, #132]	; (8000dac <HAL_I2S_MspInit+0x238>)
 8000d26:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d30:	2240      	movs	r2, #64	; 0x40
 8000d32:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d40:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d48:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d50:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d58:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d66:	4810      	ldr	r0, [pc, #64]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d68:	f000 fa20 	bl	80011ac <HAL_DMA_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_I2S_MspInit+0x202>
    {
      Error_Handler();
 8000d72:	f7ff fed1 	bl	8000b18 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <HAL_I2S_MspInit+0x234>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3748      	adds	r7, #72	; 0x48
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40003800 	.word	0x40003800
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020800 	.word	0x40020800
 8000d98:	40020000 	.word	0x40020000
 8000d9c:	40020400 	.word	0x40020400
 8000da0:	2000817c 	.word	0x2000817c
 8000da4:	40026058 	.word	0x40026058
 8000da8:	200081dc 	.word	0x200081dc
 8000dac:	40026070 	.word	0x40026070

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f8a4 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <DMA1_Stream3_IRQHandler+0x10>)
 8000e0a:	f000 fad5 	bl	80013b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000817c 	.word	0x2000817c

08000e18 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <DMA1_Stream4_IRQHandler+0x10>)
 8000e1e:	f000 facb 	bl	80013b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200081dc 	.word	0x200081dc

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e56:	490e      	ldr	r1, [pc, #56]	; (8000e90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e6c:	4c0b      	ldr	r4, [pc, #44]	; (8000e9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e7a:	f7ff ffd7 	bl	8000e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e7e:	f002 fbcf 	bl	8003620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e82:	f7ff fb25 	bl	80004d0 <main>
  bx  lr    
 8000e86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000e94:	080036b8 	.word	0x080036b8
  ldr r2, =_sbss
 8000e98:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000e9c:	20009294 	.word	0x20009294

08000ea0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	; (8000ee4 <HAL_Init+0x40>)
 8000eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_Init+0x40>)
 8000eba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec0:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_Init+0x40>)
 8000ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ecc:	2003      	movs	r0, #3
 8000ece:	f000 f92b 	bl	8001128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f808 	bl	8000ee8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed8:	f7ff fe24 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023c00 	.word	0x40023c00

08000ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x54>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_InitTick+0x58>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 f943 	bl	8001192 <HAL_SYSTICK_Config>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e00e      	b.n	8000f34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2b0f      	cmp	r3, #15
 8000f1a:	d80a      	bhi.n	8000f32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	f000 f90b 	bl	800113e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4a06      	ldr	r2, [pc, #24]	; (8000f44 <HAL_InitTick+0x5c>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000008c 	.word	0x2000008c
 8000f40:	20000094 	.word	0x20000094
 8000f44:	20000090 	.word	0x20000090

08000f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_IncTick+0x20>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_IncTick+0x24>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <HAL_IncTick+0x24>)
 8000f5a:	6013      	str	r3, [r2, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	20000094 	.word	0x20000094
 8000f6c:	20009290 	.word	0x20009290

08000f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b03      	ldr	r3, [pc, #12]	; (8000f84 <HAL_GetTick+0x14>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20009290 	.word	0x20009290

08000f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fba:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <__NVIC_SetPriorityGrouping+0x44>)
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	60d3      	str	r3, [r2, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	f003 0307 	and.w	r3, r3, #7
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	db0b      	blt.n	8001016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	f003 021f 	and.w	r2, r3, #31
 8001004:	4907      	ldr	r1, [pc, #28]	; (8001024 <__NVIC_EnableIRQ+0x38>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	095b      	lsrs	r3, r3, #5
 800100c:	2001      	movs	r0, #1
 800100e:	fa00 f202 	lsl.w	r2, r0, r2
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100

08001028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	2b00      	cmp	r3, #0
 800103a:	db0a      	blt.n	8001052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	490c      	ldr	r1, [pc, #48]	; (8001074 <__NVIC_SetPriority+0x4c>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	0112      	lsls	r2, r2, #4
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	440b      	add	r3, r1
 800104c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001050:	e00a      	b.n	8001068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <__NVIC_SetPriority+0x50>)
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	f003 030f 	and.w	r3, r3, #15
 800105e:	3b04      	subs	r3, #4
 8001060:	0112      	lsls	r2, r2, #4
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	440b      	add	r3, r1
 8001066:	761a      	strb	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	; 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f1c3 0307 	rsb	r3, r3, #7
 8001096:	2b04      	cmp	r3, #4
 8001098:	bf28      	it	cs
 800109a:	2304      	movcs	r3, #4
 800109c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3304      	adds	r3, #4
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d902      	bls.n	80010ac <NVIC_EncodePriority+0x30>
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3b03      	subs	r3, #3
 80010aa:	e000      	b.n	80010ae <NVIC_EncodePriority+0x32>
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43da      	mvns	r2, r3
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	401a      	ands	r2, r3
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c4:	f04f 31ff 	mov.w	r1, #4294967295
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	fa01 f303 	lsl.w	r3, r1, r3
 80010ce:	43d9      	mvns	r1, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	4313      	orrs	r3, r2
         );
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3724      	adds	r7, #36	; 0x24
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f4:	d301      	bcc.n	80010fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010f6:	2301      	movs	r3, #1
 80010f8:	e00f      	b.n	800111a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <SysTick_Config+0x40>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001102:	210f      	movs	r1, #15
 8001104:	f04f 30ff 	mov.w	r0, #4294967295
 8001108:	f7ff ff8e 	bl	8001028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <SysTick_Config+0x40>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <SysTick_Config+0x40>)
 8001114:	2207      	movs	r2, #7
 8001116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	e000e010 	.word	0xe000e010

08001128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f7ff ff29 	bl	8000f88 <__NVIC_SetPriorityGrouping>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff3e 	bl	8000fd0 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff8e 	bl	800107c <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5d 	bl	8001028 <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff31 	bl	8000fec <__NVIC_EnableIRQ>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff ffa2 	bl	80010e4 <SysTick_Config>
 80011a0:	4603      	mov	r3, r0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff feda 	bl	8000f70 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e099      	b.n	80012fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2202      	movs	r2, #2
 80011cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0201 	bic.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011e8:	e00f      	b.n	800120a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ea:	f7ff fec1 	bl	8000f70 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	d908      	bls.n	800120a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2220      	movs	r2, #32
 80011fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2203      	movs	r2, #3
 8001202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e078      	b.n	80012fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e8      	bne.n	80011ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	4b38      	ldr	r3, [pc, #224]	; (8001304 <HAL_DMA_Init+0x158>)
 8001224:	4013      	ands	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001236:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691b      	ldr	r3, [r3, #16]
 800123c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001242:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4313      	orrs	r3, r2
 800125a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	2b04      	cmp	r3, #4
 8001262:	d107      	bne.n	8001274 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4313      	orrs	r3, r2
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	4313      	orrs	r3, r2
 8001272:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	f023 0307 	bic.w	r3, r3, #7
 800128a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	4313      	orrs	r3, r2
 8001294:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	2b04      	cmp	r3, #4
 800129c:	d117      	bne.n	80012ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a2:	697a      	ldr	r2, [r7, #20]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00e      	beq.n	80012ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f000 fa6f 	bl	8001794 <DMA_CheckFifoParam>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d008      	beq.n	80012ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2240      	movs	r2, #64	; 0x40
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80012ca:	2301      	movs	r3, #1
 80012cc:	e016      	b.n	80012fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fa26 	bl	8001728 <DMA_CalcBaseAndBitshift>
 80012dc:	4603      	mov	r3, r0
 80012de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e4:	223f      	movs	r2, #63	; 0x3f
 80012e6:	409a      	lsls	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	f010803f 	.word	0xf010803f

08001308 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001326:	2b01      	cmp	r3, #1
 8001328:	d101      	bne.n	800132e <HAL_DMA_Start_IT+0x26>
 800132a:	2302      	movs	r3, #2
 800132c:	e040      	b.n	80013b0 <HAL_DMA_Start_IT+0xa8>
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b01      	cmp	r3, #1
 8001340:	d12f      	bne.n	80013a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2202      	movs	r2, #2
 8001346:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2200      	movs	r2, #0
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f000 f9b8 	bl	80016cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001360:	223f      	movs	r2, #63	; 0x3f
 8001362:	409a      	lsls	r2, r3
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0216 	orr.w	r2, r2, #22
 8001376:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0208 	orr.w	r2, r2, #8
 800138e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 0201 	orr.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e005      	b.n	80013ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80013aa:	2302      	movs	r3, #2
 80013ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c4:	4b92      	ldr	r3, [pc, #584]	; (8001610 <HAL_DMA_IRQHandler+0x258>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a92      	ldr	r2, [pc, #584]	; (8001614 <HAL_DMA_IRQHandler+0x25c>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0a9b      	lsrs	r3, r3, #10
 80013d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e2:	2208      	movs	r2, #8
 80013e4:	409a      	lsls	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01a      	beq.n	8001424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0204 	bic.w	r2, r2, #4
 800140a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001410:	2208      	movs	r2, #8
 8001412:	409a      	lsls	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	2201      	movs	r2, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d012      	beq.n	800145a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	2201      	movs	r2, #1
 8001448:	409a      	lsls	r2, r3
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001452:	f043 0202 	orr.w	r2, r3, #2
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	2204      	movs	r2, #4
 8001460:	409a      	lsls	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d012      	beq.n	8001490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800147c:	2204      	movs	r2, #4
 800147e:	409a      	lsls	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001488:	f043 0204 	orr.w	r2, r3, #4
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001494:	2210      	movs	r2, #16
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d043      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03c      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b2:	2210      	movs	r2, #16
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d018      	beq.n	80014fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d108      	bne.n	80014e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d024      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4798      	blx	r3
 80014e6:	e01f      	b.n	8001528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01b      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
 80014f8:	e016      	b.n	8001528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d107      	bne.n	8001518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0208 	bic.w	r2, r2, #8
 8001516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	2220      	movs	r2, #32
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 808e 	beq.w	8001656 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8086 	beq.w	8001656 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800154e:	2220      	movs	r2, #32
 8001550:	409a      	lsls	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b05      	cmp	r3, #5
 8001560:	d136      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0216 	bic.w	r2, r2, #22
 8001570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695a      	ldr	r2, [r3, #20]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <HAL_DMA_IRQHandler+0x1da>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0208 	bic.w	r2, r2, #8
 80015a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a6:	223f      	movs	r2, #63	; 0x3f
 80015a8:	409a      	lsls	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d07d      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
        }
        return;
 80015ce:	e078      	b.n	80016c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01c      	beq.n	8001618 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d108      	bne.n	80015fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d030      	beq.n	8001656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
 80015fc:	e02b      	b.n	8001656 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001602:	2b00      	cmp	r3, #0
 8001604:	d027      	beq.n	8001656 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4798      	blx	r3
 800160e:	e022      	b.n	8001656 <HAL_DMA_IRQHandler+0x29e>
 8001610:	2000008c 	.word	0x2000008c
 8001614:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10f      	bne.n	8001646 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0210 	bic.w	r2, r2, #16
 8001634:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165a:	2b00      	cmp	r3, #0
 800165c:	d032      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	d022      	beq.n	80016b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2205      	movs	r2, #5
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	429a      	cmp	r2, r3
 800168c:	d307      	bcc.n	800169e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f2      	bne.n	8001682 <HAL_DMA_IRQHandler+0x2ca>
 800169c:	e000      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800169e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
 80016c0:	e000      	b.n	80016c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016c2:	bf00      	nop
    }
  }
}
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop

080016cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b40      	cmp	r3, #64	; 0x40
 80016f8:	d108      	bne.n	800170c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800170a:	e007      	b.n	800171c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	60da      	str	r2, [r3, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b2db      	uxtb	r3, r3
 8001736:	3b10      	subs	r3, #16
 8001738:	4a14      	ldr	r2, [pc, #80]	; (800178c <DMA_CalcBaseAndBitshift+0x64>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	091b      	lsrs	r3, r3, #4
 8001740:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <DMA_CalcBaseAndBitshift+0x68>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4413      	add	r3, r2
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d909      	bls.n	800176a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800175e:	f023 0303 	bic.w	r3, r3, #3
 8001762:	1d1a      	adds	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	659a      	str	r2, [r3, #88]	; 0x58
 8001768:	e007      	b.n	800177a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001772:	f023 0303 	bic.w	r3, r3, #3
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	aaaaaaab 	.word	0xaaaaaaab
 8001790:	080036a0 	.word	0x080036a0

08001794 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d11f      	bne.n	80017ee <DMA_CheckFifoParam+0x5a>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d856      	bhi.n	8001862 <DMA_CheckFifoParam+0xce>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <DMA_CheckFifoParam+0x28>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	080017cd 	.word	0x080017cd
 80017c0:	080017df 	.word	0x080017df
 80017c4:	080017cd 	.word	0x080017cd
 80017c8:	08001863 	.word	0x08001863
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d046      	beq.n	8001866 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017dc:	e043      	b.n	8001866 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017e6:	d140      	bne.n	800186a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ec:	e03d      	b.n	800186a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f6:	d121      	bne.n	800183c <DMA_CheckFifoParam+0xa8>
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d837      	bhi.n	800186e <DMA_CheckFifoParam+0xda>
 80017fe:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <DMA_CheckFifoParam+0x70>)
 8001800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001804:	08001815 	.word	0x08001815
 8001808:	0800181b 	.word	0x0800181b
 800180c:	08001815 	.word	0x08001815
 8001810:	0800182d 	.word	0x0800182d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	73fb      	strb	r3, [r7, #15]
      break;
 8001818:	e030      	b.n	800187c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d025      	beq.n	8001872 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800182a:	e022      	b.n	8001872 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001830:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001834:	d11f      	bne.n	8001876 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800183a:	e01c      	b.n	8001876 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d903      	bls.n	800184a <DMA_CheckFifoParam+0xb6>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2b03      	cmp	r3, #3
 8001846:	d003      	beq.n	8001850 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001848:	e018      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
      break;
 800184e:	e015      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00e      	beq.n	800187a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
      break;
 8001860:	e00b      	b.n	800187a <DMA_CheckFifoParam+0xe6>
      break;
 8001862:	bf00      	nop
 8001864:	e00a      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      break;
 8001866:	bf00      	nop
 8001868:	e008      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      break;
 800186a:	bf00      	nop
 800186c:	e006      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      break;
 800186e:	bf00      	nop
 8001870:	e004      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      break;
 8001872:	bf00      	nop
 8001874:	e002      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      break;   
 8001876:	bf00      	nop
 8001878:	e000      	b.n	800187c <DMA_CheckFifoParam+0xe8>
      break;
 800187a:	bf00      	nop
    }
  } 
  
  return status; 
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	e159      	b.n	8001b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018a8:	2201      	movs	r2, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	f040 8148 	bne.w	8001b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d005      	beq.n	80018de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d130      	bne.n	8001940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	2203      	movs	r2, #3
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001914:	2201      	movs	r2, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 0201 	and.w	r2, r3, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b03      	cmp	r3, #3
 800194a:	d017      	beq.n	800197c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d123      	bne.n	80019d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	08da      	lsrs	r2, r3, #3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	220f      	movs	r2, #15
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	691a      	ldr	r2, [r3, #16]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	08da      	lsrs	r2, r3, #3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	3208      	adds	r2, #8
 80019ca:	69b9      	ldr	r1, [r7, #24]
 80019cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0203 	and.w	r2, r3, #3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 80a2 	beq.w	8001b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b57      	ldr	r3, [pc, #348]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a56      	ldr	r2, [pc, #344]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <HAL_GPIO_Init+0x2e8>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a2e:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	089b      	lsrs	r3, r3, #2
 8001a34:	3302      	adds	r3, #2
 8001a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	220f      	movs	r2, #15
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a49      	ldr	r2, [pc, #292]	; (8001b7c <HAL_GPIO_Init+0x2f0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x202>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a48      	ldr	r2, [pc, #288]	; (8001b80 <HAL_GPIO_Init+0x2f4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x1fe>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a47      	ldr	r2, [pc, #284]	; (8001b84 <HAL_GPIO_Init+0x2f8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x1fa>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a46      	ldr	r2, [pc, #280]	; (8001b88 <HAL_GPIO_Init+0x2fc>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x1f6>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a45      	ldr	r2, [pc, #276]	; (8001b8c <HAL_GPIO_Init+0x300>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x1f2>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a7e:	2307      	movs	r3, #7
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x204>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x2ec>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aae:	4b38      	ldr	r3, [pc, #224]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ad2:	4a2f      	ldr	r2, [pc, #188]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001afc:	4a24      	ldr	r2, [pc, #144]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b26:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b50:	4a0f      	ldr	r2, [pc, #60]	; (8001b90 <HAL_GPIO_Init+0x304>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f aea2 	bls.w	80018a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e128      	b.n	8001df8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a90      	ldr	r2, [pc, #576]	; (8001e00 <HAL_I2S_Init+0x26c>)
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe ffd7 	bl	8000b74 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2202      	movs	r2, #2
 8001bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bdc:	f023 030f 	bic.w	r3, r3, #15
 8001be0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2202      	movs	r2, #2
 8001be8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d060      	beq.n	8001cb4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001bfa:	2310      	movs	r3, #16
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e001      	b.n	8001c04 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001c00:	2320      	movs	r3, #32
 8001c02:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	d802      	bhi.n	8001c12 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001c12:	2001      	movs	r0, #1
 8001c14:	f001 fbc8 	bl	80033a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c18:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c22:	d125      	bne.n	8001c70 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d010      	beq.n	8001c4e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c36:	4613      	mov	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	461a      	mov	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	3305      	adds	r3, #5
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	e01f      	b.n	8001c8e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	00db      	lsls	r3, r3, #3
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c58:	4613      	mov	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	4413      	add	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	461a      	mov	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	3305      	adds	r3, #5
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e00e      	b.n	8001c8e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8a:	3305      	adds	r3, #5
 8001c8c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	4a5c      	ldr	r2, [pc, #368]	; (8001e04 <HAL_I2S_Init+0x270>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	08db      	lsrs	r3, r3, #3
 8001c98:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	085b      	lsrs	r3, r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	021b      	lsls	r3, r3, #8
 8001cb0:	61bb      	str	r3, [r7, #24]
 8001cb2:	e003      	b.n	8001cbc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d902      	bls.n	8001cc8 <HAL_I2S_Init+0x134>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	2bff      	cmp	r3, #255	; 0xff
 8001cc6:	d907      	bls.n	8001cd8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ccc:	f043 0210 	orr.w	r2, r3, #16
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e08f      	b.n	8001df8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	ea42 0103 	orr.w	r1, r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	69fa      	ldr	r2, [r7, #28]
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cf6:	f023 030f 	bic.w	r3, r3, #15
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6851      	ldr	r1, [r2, #4]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6892      	ldr	r2, [r2, #8]
 8001d02:	4311      	orrs	r1, r2
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68d2      	ldr	r2, [r2, #12]
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6992      	ldr	r2, [r2, #24]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d1a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d161      	bne.n	8001de8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a38      	ldr	r2, [pc, #224]	; (8001e08 <HAL_I2S_Init+0x274>)
 8001d28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a37      	ldr	r2, [pc, #220]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d101      	bne.n	8001d38 <HAL_I2S_Init+0x1a4>
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d36:	e001      	b.n	8001d3c <HAL_I2S_Init+0x1a8>
 8001d38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	4932      	ldr	r1, [pc, #200]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d44:	428a      	cmp	r2, r1
 8001d46:	d101      	bne.n	8001d4c <HAL_I2S_Init+0x1b8>
 8001d48:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d4a:	e001      	b.n	8001d50 <HAL_I2S_Init+0x1bc>
 8001d4c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001d50:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a2b      	ldr	r2, [pc, #172]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d101      	bne.n	8001d68 <HAL_I2S_Init+0x1d4>
 8001d64:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d66:	e001      	b.n	8001d6c <HAL_I2S_Init+0x1d8>
 8001d68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a25      	ldr	r2, [pc, #148]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_I2S_Init+0x1ea>
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001d7c:	e001      	b.n	8001d82 <HAL_I2S_Init+0x1ee>
 8001d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d82:	69db      	ldr	r3, [r3, #28]
 8001d84:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8e:	d003      	beq.n	8001d98 <HAL_I2S_Init+0x204>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d103      	bne.n	8001da0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	e001      	b.n	8001da4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001da0:	2300      	movs	r3, #0
 8001da2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dae:	4313      	orrs	r3, r2
 8001db0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001db8:	4313      	orrs	r3, r2
 8001dba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dd0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_I2S_Init+0x278>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d101      	bne.n	8001de0 <HAL_I2S_Init+0x24c>
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <HAL_I2S_Init+0x27c>)
 8001dde:	e001      	b.n	8001de4 <HAL_I2S_Init+0x250>
 8001de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001de4:	897a      	ldrh	r2, [r7, #10]
 8001de6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001df6:	2300      	movs	r3, #0
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3720      	adds	r7, #32
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	08001f0b 	.word	0x08001f0b
 8001e04:	cccccccd 	.word	0xcccccccd
 8001e08:	08002335 	.word	0x08002335
 8001e0c:	40003800 	.word	0x40003800
 8001e10:	40003400 	.word	0x40003400

08001e14 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	881a      	ldrh	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e68:	1c9a      	adds	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ffb8 	bl	8001e14 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebe:	b292      	uxth	r2, r2
 8001ec0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	1c9a      	adds	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10e      	bne.n	8001f02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ef2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff ff93 	bl	8001e28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d13a      	bne.n	8001f9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d109      	bne.n	8001f44 <I2S_IRQHandler+0x3a>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d102      	bne.n	8001f44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffb4 	bl	8001eac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4a:	2b40      	cmp	r3, #64	; 0x40
 8001f4c:	d126      	bne.n	8001f9c <I2S_IRQHandler+0x92>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d11f      	bne.n	8001f9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	613b      	str	r3, [r7, #16]
 8001f80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8e:	f043 0202 	orr.w	r2, r3, #2
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff50 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d136      	bne.n	8002016 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d109      	bne.n	8001fc6 <I2S_IRQHandler+0xbc>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbc:	2b80      	cmp	r3, #128	; 0x80
 8001fbe:	d102      	bne.n	8001fc6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ff45 	bl	8001e50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b08      	cmp	r3, #8
 8001fce:	d122      	bne.n	8002016 <I2S_IRQHandler+0x10c>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d11b      	bne.n	8002016 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001fec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f043 0204 	orr.w	r2, r3, #4
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff13 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d002      	beq.n	800204c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002046:	2302      	movs	r3, #2
 8002048:	77fb      	strb	r3, [r7, #31]
    goto error;
 800204a:	e160      	b.n	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d002      	beq.n	800205e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002058:	887b      	ldrh	r3, [r7, #2]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e15a      	b.n	8002318 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800206e:	2302      	movs	r3, #2
 8002070:	e152      	b.n	8002318 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d002      	beq.n	800209e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d114      	bne.n	80020c8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800209e:	887b      	ldrh	r3, [r7, #2]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	865a      	strh	r2, [r3, #50]	; 0x32
 80020c6:	e00b      	b.n	80020e0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	887a      	ldrh	r2, [r7, #2]
 80020de:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2205      	movs	r2, #5
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	4a8b      	ldr	r2, [pc, #556]	; (8002320 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	4a8a      	ldr	r2, [pc, #552]	; (8002324 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002102:	4a89      	ldr	r2, [pc, #548]	; (8002328 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002104:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	2200      	movs	r2, #0
 800210c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	2200      	movs	r2, #0
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211a:	4a83      	ldr	r2, [pc, #524]	; (8002328 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 800211c:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002128:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002130:	d002      	beq.n	8002138 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d16b      	bne.n	8002210 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002138:	1d3b      	adds	r3, r7, #4
 800213a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a79      	ldr	r2, [pc, #484]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d101      	bne.n	800214e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800214a:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800214c:	e001      	b.n	8002152 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800214e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002152:	330c      	adds	r3, #12
 8002154:	4619      	mov	r1, r3
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800215e:	b29b      	uxth	r3, r3
 8002160:	f7ff f8d2 	bl	8001308 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a70      	ldr	r2, [pc, #448]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d101      	bne.n	8002172 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002170:	e001      	b.n	8002176 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002172:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	496b      	ldr	r1, [pc, #428]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800217e:	428b      	cmp	r3, r1
 8002180:	d101      	bne.n	8002186 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002182:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002184:	e001      	b.n	800218a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002186:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002190:	f107 0308 	add.w	r3, r7, #8
 8002194:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	330c      	adds	r3, #12
 80021a4:	461a      	mov	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f7ff f8ac 	bl	8001308 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0202 	orr.w	r2, r2, #2
 80021be:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	f000 809e 	beq.w	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a55      	ldr	r2, [pc, #340]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80021dc:	4b54      	ldr	r3, [pc, #336]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021de:	e001      	b.n	80021e4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80021e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e4:	69da      	ldr	r2, [r3, #28]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4950      	ldr	r1, [pc, #320]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80021ec:	428b      	cmp	r3, r1
 80021ee:	d101      	bne.n	80021f4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80021f0:	4b4f      	ldr	r3, [pc, #316]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80021f2:	e001      	b.n	80021f8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80021f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021fc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69da      	ldr	r2, [r3, #28]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800220c:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800220e:	e07e      	b.n	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800221e:	d10a      	bne.n	8002236 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002236:	f107 0308 	add.w	r3, r7, #8
 800223a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a38      	ldr	r2, [pc, #224]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800224e:	4b38      	ldr	r3, [pc, #224]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002250:	e001      	b.n	8002256 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002252:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002256:	330c      	adds	r3, #12
 8002258:	461a      	mov	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	b29b      	uxth	r3, r3
 8002260:	f7ff f852 	bl	8001308 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a30      	ldr	r2, [pc, #192]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800226e:	4b30      	ldr	r3, [pc, #192]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002270:	e001      	b.n	8002276 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	492b      	ldr	r1, [pc, #172]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800227e:	428b      	cmp	r3, r1
 8002280:	d101      	bne.n	8002286 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002282:	4b2b      	ldr	r3, [pc, #172]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002284:	e001      	b.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002286:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800228a:	f042 0202 	orr.w	r2, r2, #2
 800228e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	4619      	mov	r1, r3
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	f7ff f82d 	bl	8001308 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022cc:	d01e      	beq.n	800230c <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d101      	bne.n	80022dc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022da:	e001      	b.n	80022e0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80022dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4911      	ldr	r1, [pc, #68]	; (800232c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80022e8:	428b      	cmp	r3, r1
 80022ea:	d101      	bne.n	80022f0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80022ee:	e001      	b.n	80022f4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80022f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022f8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69da      	ldr	r2, [r3, #28]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002308:	61da      	str	r2, [r3, #28]
 800230a:	e000      	b.n	800230e <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 800230c:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002316:	7ffb      	ldrb	r3, [r7, #31]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3720      	adds	r7, #32
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	080025dd 	.word	0x080025dd
 8002324:	080025f9 	.word	0x080025f9
 8002328:	080026d1 	.word	0x080026d1
 800232c:	40003800 	.word	0x40003800
 8002330:	40003400 	.word	0x40003400

08002334 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4aa2      	ldr	r2, [pc, #648]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800234e:	4ba2      	ldr	r3, [pc, #648]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002350:	e001      	b.n	8002356 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002352:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a9b      	ldr	r2, [pc, #620]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d101      	bne.n	8002370 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800236c:	4b9a      	ldr	r3, [pc, #616]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800236e:	e001      	b.n	8002374 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002370:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002380:	d004      	beq.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 8099 	bne.w	80024be <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b02      	cmp	r3, #2
 8002394:	d107      	bne.n	80023a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f9d5 	bl	8002750 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f003 0301 	and.w	r3, r3, #1
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d107      	bne.n	80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d002      	beq.n	80023c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fa78 	bl	80028b0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b40      	cmp	r3, #64	; 0x40
 80023c8:	d13a      	bne.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d035      	beq.n	8002440 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a7e      	ldr	r2, [pc, #504]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80023de:	4b7e      	ldr	r3, [pc, #504]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023e0:	e001      	b.n	80023e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80023e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4979      	ldr	r1, [pc, #484]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ee:	428b      	cmp	r3, r1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80023f2:	4b79      	ldr	r3, [pc, #484]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023f4:	e001      	b.n	80023fa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80023f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023fe:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800240e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002410:	2300      	movs	r3, #0
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff fcfe 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b08      	cmp	r3, #8
 8002448:	f040 80be 	bne.w	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80b8 	beq.w	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002466:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a59      	ldr	r2, [pc, #356]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002472:	4b59      	ldr	r3, [pc, #356]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002474:	e001      	b.n	800247a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002476:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4954      	ldr	r1, [pc, #336]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002482:	428b      	cmp	r3, r1
 8002484:	d101      	bne.n	800248a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002488:	e001      	b.n	800248e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800248a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800248e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002492:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	f043 0204 	orr.w	r2, r3, #4
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fcc0 	bl	8001e3c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024bc:	e084      	b.n	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d107      	bne.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f96e 	bl	80027b4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d107      	bne.n	80024f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d002      	beq.n	80024f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f9ad 	bl	800284c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d12f      	bne.n	800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d02a      	beq.n	800255c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002514:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2e      	ldr	r2, [pc, #184]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002520:	4b2d      	ldr	r3, [pc, #180]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002522:	e001      	b.n	8002528 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002524:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4929      	ldr	r1, [pc, #164]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002530:	428b      	cmp	r3, r1
 8002532:	d101      	bne.n	8002538 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002534:	4b28      	ldr	r3, [pc, #160]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002536:	e001      	b.n	800253c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002538:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800253c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002540:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fc70 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b08      	cmp	r3, #8
 8002564:	d131      	bne.n	80025ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d02c      	beq.n	80025ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800257a:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800257c:	e001      	b.n	8002582 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800257e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4912      	ldr	r1, [pc, #72]	; (80025d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800258a:	428b      	cmp	r3, r1
 800258c:	d101      	bne.n	8002592 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002590:	e001      	b.n	8002596 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002592:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002596:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800259a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80025aa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff fc3b 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025c6:	e000      	b.n	80025ca <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025c8:	bf00      	nop
}
 80025ca:	bf00      	nop
 80025cc:	3720      	adds	r7, #32
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40003800 	.word	0x40003800
 80025d8:	40003400 	.word	0x40003400

080025dc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7fe fa74 	bl	8000ad8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002604:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d155      	bne.n	80026ba <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002618:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261c:	d006      	beq.n	800262c <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002628:	2b00      	cmp	r3, #0
 800262a:	d11e      	bne.n	800266a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a25      	ldr	r2, [pc, #148]	; (80026c8 <I2SEx_TxRxDMACplt+0xd0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <I2SEx_TxRxDMACplt+0x42>
 8002636:	4b25      	ldr	r3, [pc, #148]	; (80026cc <I2SEx_TxRxDMACplt+0xd4>)
 8002638:	e001      	b.n	800263e <I2SEx_TxRxDMACplt+0x46>
 800263a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4920      	ldr	r1, [pc, #128]	; (80026c8 <I2SEx_TxRxDMACplt+0xd0>)
 8002646:	428b      	cmp	r3, r1
 8002648:	d101      	bne.n	800264e <I2SEx_TxRxDMACplt+0x56>
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <I2SEx_TxRxDMACplt+0xd4>)
 800264c:	e001      	b.n	8002652 <I2SEx_TxRxDMACplt+0x5a>
 800264e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002652:	f022 0201 	bic.w	r2, r2, #1
 8002656:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0202 	bic.w	r2, r2, #2
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	e01d      	b.n	80026a6 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a12      	ldr	r2, [pc, #72]	; (80026c8 <I2SEx_TxRxDMACplt+0xd0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d101      	bne.n	8002688 <I2SEx_TxRxDMACplt+0x90>
 8002684:	4b11      	ldr	r3, [pc, #68]	; (80026cc <I2SEx_TxRxDMACplt+0xd4>)
 8002686:	e001      	b.n	800268c <I2SEx_TxRxDMACplt+0x94>
 8002688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	490d      	ldr	r1, [pc, #52]	; (80026c8 <I2SEx_TxRxDMACplt+0xd0>)
 8002694:	428b      	cmp	r3, r1
 8002696:	d101      	bne.n	800269c <I2SEx_TxRxDMACplt+0xa4>
 8002698:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <I2SEx_TxRxDMACplt+0xd4>)
 800269a:	e001      	b.n	80026a0 <I2SEx_TxRxDMACplt+0xa8>
 800269c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a0:	f022 0202 	bic.w	r2, r2, #2
 80026a4:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2200      	movs	r2, #0
 80026aa:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f7fe fa1c 	bl	8000af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80026c0:	bf00      	nop
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40003800 	.word	0x40003800
 80026cc:	40003400 	.word	0x40003400

080026d0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0203 	bic.w	r2, r2, #3
 80026ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a15      	ldr	r2, [pc, #84]	; (8002748 <I2SEx_TxRxDMAError+0x78>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d101      	bne.n	80026fc <I2SEx_TxRxDMAError+0x2c>
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <I2SEx_TxRxDMAError+0x7c>)
 80026fa:	e001      	b.n	8002700 <I2SEx_TxRxDMAError+0x30>
 80026fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4910      	ldr	r1, [pc, #64]	; (8002748 <I2SEx_TxRxDMAError+0x78>)
 8002708:	428b      	cmp	r3, r1
 800270a:	d101      	bne.n	8002710 <I2SEx_TxRxDMAError+0x40>
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <I2SEx_TxRxDMAError+0x7c>)
 800270e:	e001      	b.n	8002714 <I2SEx_TxRxDMAError+0x44>
 8002710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002714:	f022 0203 	bic.w	r2, r2, #3
 8002718:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f043 0208 	orr.w	r2, r3, #8
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f7ff fb7e 	bl	8001e3c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40003800 	.word	0x40003800
 800274c:	40003400 	.word	0x40003400

08002750 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	1c99      	adds	r1, r3, #2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6251      	str	r1, [r2, #36]	; 0x24
 8002762:	881a      	ldrh	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d113      	bne.n	80027aa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002790:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002796:	b29b      	uxth	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe f9a7 	bl	8000af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027aa:	bf00      	nop
 80027ac:	3708      	adds	r7, #8
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	1c99      	adds	r1, r3, #2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6251      	str	r1, [r2, #36]	; 0x24
 80027c6:	8819      	ldrh	r1, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <I2SEx_TxISR_I2SExt+0x90>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d101      	bne.n	80027d6 <I2SEx_TxISR_I2SExt+0x22>
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <I2SEx_TxISR_I2SExt+0x94>)
 80027d4:	e001      	b.n	80027da <I2SEx_TxISR_I2SExt+0x26>
 80027d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027da:	460a      	mov	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d121      	bne.n	800283a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a12      	ldr	r2, [pc, #72]	; (8002844 <I2SEx_TxISR_I2SExt+0x90>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d101      	bne.n	8002804 <I2SEx_TxISR_I2SExt+0x50>
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <I2SEx_TxISR_I2SExt+0x94>)
 8002802:	e001      	b.n	8002808 <I2SEx_TxISR_I2SExt+0x54>
 8002804:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	490d      	ldr	r1, [pc, #52]	; (8002844 <I2SEx_TxISR_I2SExt+0x90>)
 8002810:	428b      	cmp	r3, r1
 8002812:	d101      	bne.n	8002818 <I2SEx_TxISR_I2SExt+0x64>
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <I2SEx_TxISR_I2SExt+0x94>)
 8002816:	e001      	b.n	800281c <I2SEx_TxISR_I2SExt+0x68>
 8002818:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800281c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002820:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d106      	bne.n	800283a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe f95f 	bl	8000af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40003800 	.word	0x40003800
 8002848:	40003400 	.word	0x40003400

0800284c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68d8      	ldr	r0, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	1c99      	adds	r1, r3, #2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002864:	b282      	uxth	r2, r0
 8002866:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800287a:	b29b      	uxth	r3, r3
 800287c:	2b00      	cmp	r3, #0
 800287e:	d113      	bne.n	80028a8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800288e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe f928 	bl	8000af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028a8:	bf00      	nop
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a20      	ldr	r2, [pc, #128]	; (8002940 <I2SEx_RxISR_I2SExt+0x90>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <I2SEx_RxISR_I2SExt+0x16>
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <I2SEx_RxISR_I2SExt+0x94>)
 80028c4:	e001      	b.n	80028ca <I2SEx_RxISR_I2SExt+0x1a>
 80028c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ca:	68d8      	ldr	r0, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	1c99      	adds	r1, r3, #2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80028d6:	b282      	uxth	r2, r0
 80028d8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028de:	b29b      	uxth	r3, r3
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d121      	bne.n	8002936 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a12      	ldr	r2, [pc, #72]	; (8002940 <I2SEx_RxISR_I2SExt+0x90>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d101      	bne.n	8002900 <I2SEx_RxISR_I2SExt+0x50>
 80028fc:	4b11      	ldr	r3, [pc, #68]	; (8002944 <I2SEx_RxISR_I2SExt+0x94>)
 80028fe:	e001      	b.n	8002904 <I2SEx_RxISR_I2SExt+0x54>
 8002900:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	490d      	ldr	r1, [pc, #52]	; (8002940 <I2SEx_RxISR_I2SExt+0x90>)
 800290c:	428b      	cmp	r3, r1
 800290e:	d101      	bne.n	8002914 <I2SEx_RxISR_I2SExt+0x64>
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <I2SEx_RxISR_I2SExt+0x94>)
 8002912:	e001      	b.n	8002918 <I2SEx_RxISR_I2SExt+0x68>
 8002914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002918:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800291c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7fe f8e1 	bl	8000af8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40003800 	.word	0x40003800
 8002944:	40003400 	.word	0x40003400

08002948 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d101      	bne.n	800295a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e264      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d075      	beq.n	8002a52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002966:	4ba3      	ldr	r3, [pc, #652]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f003 030c 	and.w	r3, r3, #12
 800296e:	2b04      	cmp	r3, #4
 8002970:	d00c      	beq.n	800298c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002972:	4ba0      	ldr	r3, [pc, #640]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800297a:	2b08      	cmp	r3, #8
 800297c:	d112      	bne.n	80029a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b9d      	ldr	r3, [pc, #628]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800298a:	d10b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	4b99      	ldr	r3, [pc, #612]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d05b      	beq.n	8002a50 <HAL_RCC_OscConfig+0x108>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d157      	bne.n	8002a50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e23f      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_OscConfig+0x74>
 80029ae:	4b91      	ldr	r3, [pc, #580]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a90      	ldr	r2, [pc, #576]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xb0>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0x98>
 80029c6:	4b8b      	ldr	r3, [pc, #556]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a8a      	ldr	r2, [pc, #552]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b88      	ldr	r3, [pc, #544]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a87      	ldr	r2, [pc, #540]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xb0>
 80029e0:	4b84      	ldr	r3, [pc, #528]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a83      	ldr	r2, [pc, #524]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a80      	ldr	r2, [pc, #512]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a00:	f7fe fab6 	bl	8000f70 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fab2 	bl	8000f70 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	; 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e204      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b76      	ldr	r3, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xc0>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a28:	f7fe faa2 	bl	8000f70 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe fa9e 	bl	8000f70 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	; 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e1f0      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0xe8>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d063      	beq.n	8002b26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5e:	4b65      	ldr	r3, [pc, #404]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a6a:	4b62      	ldr	r3, [pc, #392]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d11c      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a76:	4b5f      	ldr	r3, [pc, #380]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d116      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	4b5c      	ldr	r3, [pc, #368]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d005      	beq.n	8002a9a <HAL_RCC_OscConfig+0x152>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d001      	beq.n	8002a9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e1c4      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a9a:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4952      	ldr	r1, [pc, #328]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	e03a      	b.n	8002b26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d020      	beq.n	8002afa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab8:	4b4f      	ldr	r3, [pc, #316]	; (8002bf8 <HAL_RCC_OscConfig+0x2b0>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fa57 	bl	8000f70 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fa53 	bl	8000f70 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e1a5      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad8:	4b46      	ldr	r3, [pc, #280]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4940      	ldr	r1, [pc, #256]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	600b      	str	r3, [r1, #0]
 8002af8:	e015      	b.n	8002b26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <HAL_RCC_OscConfig+0x2b0>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7fe fa36 	bl	8000f70 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b08:	f7fe fa32 	bl	8000f70 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e184      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d030      	beq.n	8002b94 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d016      	beq.n	8002b68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b3a:	4b30      	ldr	r3, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x2b4>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7fe fa16 	bl	8000f70 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b48:	f7fe fa12 	bl	8000f70 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e164      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5a:	4b26      	ldr	r3, [pc, #152]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x200>
 8002b66:	e015      	b.n	8002b94 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x2b4>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe f9ff 	bl	8000f70 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b76:	f7fe f9fb 	bl	8000f70 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e14d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b88:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a0 	beq.w	8002ce2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10f      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCC_OscConfig+0x2ac>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bde:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a07      	ldr	r2, [pc, #28]	; (8002c00 <HAL_RCC_OscConfig+0x2b8>)
 8002be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bea:	f7fe f9c1 	bl	8000f70 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf0:	e011      	b.n	8002c16 <HAL_RCC_OscConfig+0x2ce>
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	42470000 	.word	0x42470000
 8002bfc:	42470e80 	.word	0x42470e80
 8002c00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c04:	f7fe f9b4 	bl	8000f70 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e106      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <HAL_RCC_OscConfig+0x4e4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d0f0      	beq.n	8002c04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x2f0>
 8002c2a:	4b81      	ldr	r3, [pc, #516]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	; 0x70
 8002c36:	e01c      	b.n	8002c72 <HAL_RCC_OscConfig+0x32a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	2b05      	cmp	r3, #5
 8002c3e:	d10c      	bne.n	8002c5a <HAL_RCC_OscConfig+0x312>
 8002c40:	4b7b      	ldr	r3, [pc, #492]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	4a7a      	ldr	r2, [pc, #488]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4c:	4b78      	ldr	r3, [pc, #480]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c50:	4a77      	ldr	r2, [pc, #476]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6713      	str	r3, [r2, #112]	; 0x70
 8002c58:	e00b      	b.n	8002c72 <HAL_RCC_OscConfig+0x32a>
 8002c5a:	4b75      	ldr	r3, [pc, #468]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5e:	4a74      	ldr	r2, [pc, #464]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c60:	f023 0301 	bic.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	; 0x70
 8002c66:	4b72      	ldr	r3, [pc, #456]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	4a71      	ldr	r2, [pc, #452]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c6c:	f023 0304 	bic.w	r3, r3, #4
 8002c70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d015      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7a:	f7fe f979 	bl	8000f70 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7fe f975 	bl	8000f70 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0c5      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c98:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ee      	beq.n	8002c82 <HAL_RCC_OscConfig+0x33a>
 8002ca4:	e014      	b.n	8002cd0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca6:	f7fe f963 	bl	8000f70 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cae:	f7fe f95f 	bl	8000f70 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0af      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ee      	bne.n	8002cae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd0:	7dfb      	ldrb	r3, [r7, #23]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd6:	4b56      	ldr	r3, [pc, #344]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a55      	ldr	r2, [pc, #340]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f000 809b 	beq.w	8002e22 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cec:	4b50      	ldr	r3, [pc, #320]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d05c      	beq.n	8002db2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d141      	bne.n	8002d84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b4c      	ldr	r3, [pc, #304]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d06:	f7fe f933 	bl	8000f70 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d0e:	f7fe f92f 	bl	8000f70 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e081      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d20:	4b43      	ldr	r3, [pc, #268]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f0      	bne.n	8002d0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a1b      	ldr	r3, [r3, #32]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	019b      	lsls	r3, r3, #6
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	041b      	lsls	r3, r3, #16
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	4937      	ldr	r1, [pc, #220]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d56:	4b37      	ldr	r3, [pc, #220]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe f908 	bl	8000f70 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d64:	f7fe f904 	bl	8000f70 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e056      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b2e      	ldr	r3, [pc, #184]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0x41c>
 8002d82:	e04e      	b.n	8002e22 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b2b      	ldr	r3, [pc, #172]	; (8002e34 <HAL_RCC_OscConfig+0x4ec>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8a:	f7fe f8f1 	bl	8000f70 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d92:	f7fe f8ed 	bl	8000f70 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e03f      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x44a>
 8002db0:	e037      	b.n	8002e22 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e032      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <HAL_RCC_OscConfig+0x4e8>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d028      	beq.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d121      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d11a      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dee:	4013      	ands	r3, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d111      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	3b01      	subs	r3, #1
 8002e08:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d001      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e000      	b.n	8002e24 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3718      	adds	r7, #24
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	40007000 	.word	0x40007000
 8002e30:	40023800 	.word	0x40023800
 8002e34:	42470060 	.word	0x42470060

08002e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d101      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e0cc      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e4c:	4b68      	ldr	r3, [pc, #416]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0307 	and.w	r3, r3, #7
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d90c      	bls.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e5a:	4b65      	ldr	r3, [pc, #404]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0307 	and.w	r3, r3, #7
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d001      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0b8      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d020      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e8c:	4b59      	ldr	r3, [pc, #356]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a58      	ldr	r2, [pc, #352]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0308 	and.w	r3, r3, #8
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea4:	4b53      	ldr	r3, [pc, #332]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4a52      	ldr	r2, [pc, #328]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eaa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb0:	4b50      	ldr	r3, [pc, #320]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	494d      	ldr	r1, [pc, #308]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d044      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d107      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	4b47      	ldr	r3, [pc, #284]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d119      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d003      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef2:	2b03      	cmp	r3, #3
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef6:	4b3f      	ldr	r3, [pc, #252]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d109      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e06f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f06:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e067      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f16:	4b37      	ldr	r3, [pc, #220]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f023 0203 	bic.w	r2, r3, #3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4934      	ldr	r1, [pc, #208]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f28:	f7fe f822 	bl	8000f70 <HAL_GetTick>
 8002f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f30:	f7fe f81e 	bl	8000f70 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e04f      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f46:	4b2b      	ldr	r3, [pc, #172]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 020c 	and.w	r2, r3, #12
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d1eb      	bne.n	8002f30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f58:	4b25      	ldr	r3, [pc, #148]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d20c      	bcs.n	8002f80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f66:	4b22      	ldr	r3, [pc, #136]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6e:	4b20      	ldr	r3, [pc, #128]	; (8002ff0 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0307 	and.w	r3, r3, #7
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d001      	beq.n	8002f80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e032      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f8c:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d009      	beq.n	8002fbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002faa:	4b12      	ldr	r3, [pc, #72]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	490e      	ldr	r1, [pc, #56]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fbe:	f000 f821 	bl	8003004 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490a      	ldr	r1, [pc, #40]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c0>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd6:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c4>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fda:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_ClockConfig+0x1c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd ff82 	bl	8000ee8 <HAL_InitTick>

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40023c00 	.word	0x40023c00
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	08003690 	.word	0x08003690
 8002ffc:	2000008c 	.word	0x2000008c
 8003000:	20000090 	.word	0x20000090

08003004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003004:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800300c:	2300      	movs	r3, #0
 800300e:	607b      	str	r3, [r7, #4]
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	2300      	movs	r3, #0
 8003016:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800301c:	4b67      	ldr	r3, [pc, #412]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b08      	cmp	r3, #8
 8003026:	d00d      	beq.n	8003044 <HAL_RCC_GetSysClockFreq+0x40>
 8003028:	2b08      	cmp	r3, #8
 800302a:	f200 80bd 	bhi.w	80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x34>
 8003032:	2b04      	cmp	r3, #4
 8003034:	d003      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x3a>
 8003036:	e0b7      	b.n	80031a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003038:	4b61      	ldr	r3, [pc, #388]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800303a:	60bb      	str	r3, [r7, #8]
       break;
 800303c:	e0b7      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303e:	4b61      	ldr	r3, [pc, #388]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003040:	60bb      	str	r3, [r7, #8]
      break;
 8003042:	e0b4      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003044:	4b5d      	ldr	r3, [pc, #372]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304e:	4b5b      	ldr	r3, [pc, #364]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d04d      	beq.n	80030f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305a:	4b58      	ldr	r3, [pc, #352]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	099b      	lsrs	r3, r3, #6
 8003060:	461a      	mov	r2, r3
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	f240 10ff 	movw	r0, #511	; 0x1ff
 800306a:	f04f 0100 	mov.w	r1, #0
 800306e:	ea02 0800 	and.w	r8, r2, r0
 8003072:	ea03 0901 	and.w	r9, r3, r1
 8003076:	4640      	mov	r0, r8
 8003078:	4649      	mov	r1, r9
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	014b      	lsls	r3, r1, #5
 8003084:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003088:	0142      	lsls	r2, r0, #5
 800308a:	4610      	mov	r0, r2
 800308c:	4619      	mov	r1, r3
 800308e:	ebb0 0008 	subs.w	r0, r0, r8
 8003092:	eb61 0109 	sbc.w	r1, r1, r9
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	018b      	lsls	r3, r1, #6
 80030a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80030a4:	0182      	lsls	r2, r0, #6
 80030a6:	1a12      	subs	r2, r2, r0
 80030a8:	eb63 0301 	sbc.w	r3, r3, r1
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	00d9      	lsls	r1, r3, #3
 80030b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030ba:	00d0      	lsls	r0, r2, #3
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	eb12 0208 	adds.w	r2, r2, r8
 80030c4:	eb43 0309 	adc.w	r3, r3, r9
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	0259      	lsls	r1, r3, #9
 80030d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030d6:	0250      	lsls	r0, r2, #9
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4610      	mov	r0, r2
 80030de:	4619      	mov	r1, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	f7fd f876 	bl	80001d8 <__aeabi_uldivmod>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4613      	mov	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e04a      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f6:	4b31      	ldr	r3, [pc, #196]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	099b      	lsrs	r3, r3, #6
 80030fc:	461a      	mov	r2, r3
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	ea02 0400 	and.w	r4, r2, r0
 800310e:	ea03 0501 	and.w	r5, r3, r1
 8003112:	4620      	mov	r0, r4
 8003114:	4629      	mov	r1, r5
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	014b      	lsls	r3, r1, #5
 8003120:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003124:	0142      	lsls	r2, r0, #5
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	1b00      	subs	r0, r0, r4
 800312c:	eb61 0105 	sbc.w	r1, r1, r5
 8003130:	f04f 0200 	mov.w	r2, #0
 8003134:	f04f 0300 	mov.w	r3, #0
 8003138:	018b      	lsls	r3, r1, #6
 800313a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800313e:	0182      	lsls	r2, r0, #6
 8003140:	1a12      	subs	r2, r2, r0
 8003142:	eb63 0301 	sbc.w	r3, r3, r1
 8003146:	f04f 0000 	mov.w	r0, #0
 800314a:	f04f 0100 	mov.w	r1, #0
 800314e:	00d9      	lsls	r1, r3, #3
 8003150:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003154:	00d0      	lsls	r0, r2, #3
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	1912      	adds	r2, r2, r4
 800315c:	eb45 0303 	adc.w	r3, r5, r3
 8003160:	f04f 0000 	mov.w	r0, #0
 8003164:	f04f 0100 	mov.w	r1, #0
 8003168:	0299      	lsls	r1, r3, #10
 800316a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800316e:	0290      	lsls	r0, r2, #10
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4610      	mov	r0, r2
 8003176:	4619      	mov	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	461a      	mov	r2, r3
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	f7fd f82a 	bl	80001d8 <__aeabi_uldivmod>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4613      	mov	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	0c1b      	lsrs	r3, r3, #16
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	3301      	adds	r3, #1
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a4:	60bb      	str	r3, [r7, #8]
      break;
 80031a6:	e002      	b.n	80031ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031aa:	60bb      	str	r3, [r7, #8]
      break;
 80031ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031ae:	68bb      	ldr	r3, [r7, #8]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d038      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031f6:	f7fd febb 	bl	8000f70 <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031fe:	f7fd feb7 	bl	8000f70 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0bd      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	071b      	lsls	r3, r3, #28
 800322e:	495a      	ldr	r1, [pc, #360]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003236:	4b57      	ldr	r3, [pc, #348]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800323c:	f7fd fe98 	bl	8000f70 <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003244:	f7fd fe94 	bl	8000f70 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e09a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003256:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8083 	beq.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	4b48      	ldr	r3, [pc, #288]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a47      	ldr	r2, [pc, #284]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b45      	ldr	r3, [pc, #276]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800328c:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a42      	ldr	r2, [pc, #264]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003298:	f7fd fe6a 	bl	8000f70 <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fd fe66 	bl	8000f70 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e06c      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032b2:	4b3a      	ldr	r3, [pc, #232]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032be:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d02f      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d028      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032dc:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032f2:	4a29      	ldr	r2, [pc, #164]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d114      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003304:	f7fd fe34 	bl	8000f70 <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fd fe30 	bl	8000f70 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e034      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ee      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800333a:	d10d      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	4911      	ldr	r1, [pc, #68]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003362:	6093      	str	r3, [r2, #8]
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003370:	4909      	ldr	r1, [pc, #36]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	4313      	orrs	r3, r2
 8003374:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7d1a      	ldrb	r2, [r3, #20]
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003388:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	42470068 	.word	0x42470068
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000
 80033a0:	42470e40 	.word	0x42470e40
 80033a4:	424711e0 	.word	0x424711e0

080033a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d140      	bne.n	8003448 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d131      	bne.n	8003440 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80033dc:	4b1f      	ldr	r3, [pc, #124]	; (800345c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80033de:	617b      	str	r3, [r7, #20]
          break;
 80033e0:	e031      	b.n	8003446 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ee:	d109      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80033f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fa:	4a19      	ldr	r2, [pc, #100]	; (8003460 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	e008      	b.n	8003416 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800340e:	4a15      	ldr	r2, [pc, #84]	; (8003464 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003416:	4b10      	ldr	r3, [pc, #64]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	099b      	lsrs	r3, r3, #6
 800341e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	fb02 f303 	mul.w	r3, r2, r3
 8003428:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800342c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003430:	0f1b      	lsrs	r3, r3, #28
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
          break;
 800343e:	e002      	b.n	8003446 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	617b      	str	r3, [r7, #20]
          break;
 8003444:	bf00      	nop
        }
      }
      break;
 8003446:	bf00      	nop
    }
  }
  return frequency;
 8003448:	697b      	ldr	r3, [r7, #20]
}
 800344a:	4618      	mov	r0, r3
 800344c:	371c      	adds	r7, #28
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	00bb8000 	.word	0x00bb8000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	00f42400 	.word	0x00f42400

08003468 <arm_biquad_cascade_df1_init_f32>:
 8003468:	b538      	push	{r3, r4, r5, lr}
 800346a:	4604      	mov	r4, r0
 800346c:	6082      	str	r2, [r0, #8]
 800346e:	6001      	str	r1, [r0, #0]
 8003470:	461d      	mov	r5, r3
 8003472:	010a      	lsls	r2, r1, #4
 8003474:	4618      	mov	r0, r3
 8003476:	2100      	movs	r1, #0
 8003478:	f000 f8f6 	bl	8003668 <memset>
 800347c:	6065      	str	r5, [r4, #4]
 800347e:	bd38      	pop	{r3, r4, r5, pc}

08003480 <arm_biquad_cascade_df1_f32>:
 8003480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003484:	ed2d 8b02 	vpush	{d8}
 8003488:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800348c:	6886      	ldr	r6, [r0, #8]
 800348e:	6845      	ldr	r5, [r0, #4]
 8003490:	6807      	ldr	r7, [r0, #0]
 8003492:	4696      	mov	lr, r2
 8003494:	ea4f 180c 	mov.w	r8, ip, lsl #4
 8003498:	f003 0203 	and.w	r2, r3, #3
 800349c:	eb0e 0908 	add.w	r9, lr, r8
 80034a0:	3614      	adds	r6, #20
 80034a2:	3510      	adds	r5, #16
 80034a4:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80034a8:	ed56 1a04 	vldr	s3, [r6, #-16]
 80034ac:	ed16 1a03 	vldr	s2, [r6, #-12]
 80034b0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80034b4:	ed16 0a01 	vldr	s0, [r6, #-4]
 80034b8:	ed15 8a04 	vldr	s16, [r5, #-16]
 80034bc:	ed55 8a03 	vldr	s17, [r5, #-12]
 80034c0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80034c4:	ed55 7a01 	vldr	s15, [r5, #-4]
 80034c8:	f1bc 0f00 	cmp.w	ip, #0
 80034cc:	f000 80a5 	beq.w	800361a <arm_biquad_cascade_df1_f32+0x19a>
 80034d0:	f101 0010 	add.w	r0, r1, #16
 80034d4:	f10e 0310 	add.w	r3, lr, #16
 80034d8:	4664      	mov	r4, ip
 80034da:	ed50 3a04 	vldr	s7, [r0, #-16]
 80034de:	ee21 6a88 	vmul.f32	s12, s3, s16
 80034e2:	ee22 5a23 	vmul.f32	s10, s4, s7
 80034e6:	ee61 8a28 	vmul.f32	s17, s2, s17
 80034ea:	ee35 6a06 	vadd.f32	s12, s10, s12
 80034ee:	ee60 6a87 	vmul.f32	s13, s1, s14
 80034f2:	ee36 6a28 	vadd.f32	s12, s12, s17
 80034f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80034fa:	ee76 5a26 	vadd.f32	s11, s12, s13
 80034fe:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8003502:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8003506:	ee21 8a08 	vmul.f32	s16, s2, s16
 800350a:	ed43 7a04 	vstr	s15, [r3, #-16]
 800350e:	ed50 2a03 	vldr	s5, [r0, #-12]
 8003512:	ee22 6a22 	vmul.f32	s12, s4, s5
 8003516:	ee60 5aa7 	vmul.f32	s11, s1, s15
 800351a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800351e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003522:	ee76 6a08 	vadd.f32	s13, s12, s16
 8003526:	ee21 3aa2 	vmul.f32	s6, s3, s5
 800352a:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800352e:	ee21 8a23 	vmul.f32	s16, s2, s7
 8003532:	ee36 7a87 	vadd.f32	s14, s13, s14
 8003536:	ee60 7a27 	vmul.f32	s15, s0, s15
 800353a:	ed03 7a03 	vstr	s14, [r3, #-12]
 800353e:	ed50 8a02 	vldr	s17, [r0, #-8]
 8003542:	ee62 3a28 	vmul.f32	s7, s4, s17
 8003546:	ee20 6a87 	vmul.f32	s12, s1, s14
 800354a:	ee33 3a83 	vadd.f32	s6, s7, s6
 800354e:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8003552:	ee73 6a08 	vadd.f32	s13, s6, s16
 8003556:	ee61 2a22 	vmul.f32	s5, s2, s5
 800355a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800355e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003566:	3c01      	subs	r4, #1
 8003568:	ed43 7a02 	vstr	s15, [r3, #-8]
 800356c:	ed10 8a01 	vldr	s16, [r0, #-4]
 8003570:	ee62 3a08 	vmul.f32	s7, s4, s16
 8003574:	ee60 6aa7 	vmul.f32	s13, s1, s15
 8003578:	ee73 3a84 	vadd.f32	s7, s7, s8
 800357c:	f100 0010 	add.w	r0, r0, #16
 8003580:	ee33 4aa2 	vadd.f32	s8, s7, s5
 8003584:	f103 0310 	add.w	r3, r3, #16
 8003588:	ee34 4a26 	vadd.f32	s8, s8, s13
 800358c:	ee37 7a04 	vadd.f32	s14, s14, s8
 8003590:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8003594:	d1a1      	bne.n	80034da <arm_biquad_cascade_df1_f32+0x5a>
 8003596:	4441      	add	r1, r8
 8003598:	4648      	mov	r0, r9
 800359a:	b3aa      	cbz	r2, 8003608 <arm_biquad_cascade_df1_f32+0x188>
 800359c:	4613      	mov	r3, r2
 800359e:	e003      	b.n	80035a8 <arm_biquad_cascade_df1_f32+0x128>
 80035a0:	eeb0 7a45 	vmov.f32	s14, s10
 80035a4:	eeb0 8a43 	vmov.f32	s16, s6
 80035a8:	ecb1 3a01 	vldmia	r1!, {s6}
 80035ac:	ee21 6a88 	vmul.f32	s12, s3, s16
 80035b0:	ee62 3a03 	vmul.f32	s7, s4, s6
 80035b4:	ee61 8a28 	vmul.f32	s17, s2, s17
 80035b8:	ee33 4a86 	vadd.f32	s8, s7, s12
 80035bc:	ee60 4a87 	vmul.f32	s9, s1, s14
 80035c0:	ee34 6a28 	vadd.f32	s12, s8, s17
 80035c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80035c8:	ee76 4a24 	vadd.f32	s9, s12, s9
 80035cc:	3b01      	subs	r3, #1
 80035ce:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80035d2:	eef0 8a48 	vmov.f32	s17, s16
 80035d6:	eef0 7a47 	vmov.f32	s15, s14
 80035da:	eca0 5a01 	vstmia	r0!, {s10}
 80035de:	d1df      	bne.n	80035a0 <arm_biquad_cascade_df1_f32+0x120>
 80035e0:	3f01      	subs	r7, #1
 80035e2:	ed05 3a04 	vstr	s6, [r5, #-16]
 80035e6:	ed05 8a03 	vstr	s16, [r5, #-12]
 80035ea:	ed05 5a02 	vstr	s10, [r5, #-8]
 80035ee:	ed05 7a01 	vstr	s14, [r5, #-4]
 80035f2:	f106 0614 	add.w	r6, r6, #20
 80035f6:	f105 0510 	add.w	r5, r5, #16
 80035fa:	4671      	mov	r1, lr
 80035fc:	f47f af52 	bne.w	80034a4 <arm_biquad_cascade_df1_f32+0x24>
 8003600:	ecbd 8b02 	vpop	{d8}
 8003604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003608:	eeb0 5a47 	vmov.f32	s10, s14
 800360c:	eeb0 3a48 	vmov.f32	s6, s16
 8003610:	eeb0 7a67 	vmov.f32	s14, s15
 8003614:	eeb0 8a68 	vmov.f32	s16, s17
 8003618:	e7e2      	b.n	80035e0 <arm_biquad_cascade_df1_f32+0x160>
 800361a:	4670      	mov	r0, lr
 800361c:	e7bd      	b.n	800359a <arm_biquad_cascade_df1_f32+0x11a>
 800361e:	bf00      	nop

08003620 <__libc_init_array>:
 8003620:	b570      	push	{r4, r5, r6, lr}
 8003622:	4d0d      	ldr	r5, [pc, #52]	; (8003658 <__libc_init_array+0x38>)
 8003624:	4c0d      	ldr	r4, [pc, #52]	; (800365c <__libc_init_array+0x3c>)
 8003626:	1b64      	subs	r4, r4, r5
 8003628:	10a4      	asrs	r4, r4, #2
 800362a:	2600      	movs	r6, #0
 800362c:	42a6      	cmp	r6, r4
 800362e:	d109      	bne.n	8003644 <__libc_init_array+0x24>
 8003630:	4d0b      	ldr	r5, [pc, #44]	; (8003660 <__libc_init_array+0x40>)
 8003632:	4c0c      	ldr	r4, [pc, #48]	; (8003664 <__libc_init_array+0x44>)
 8003634:	f000 f820 	bl	8003678 <_init>
 8003638:	1b64      	subs	r4, r4, r5
 800363a:	10a4      	asrs	r4, r4, #2
 800363c:	2600      	movs	r6, #0
 800363e:	42a6      	cmp	r6, r4
 8003640:	d105      	bne.n	800364e <__libc_init_array+0x2e>
 8003642:	bd70      	pop	{r4, r5, r6, pc}
 8003644:	f855 3b04 	ldr.w	r3, [r5], #4
 8003648:	4798      	blx	r3
 800364a:	3601      	adds	r6, #1
 800364c:	e7ee      	b.n	800362c <__libc_init_array+0xc>
 800364e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003652:	4798      	blx	r3
 8003654:	3601      	adds	r6, #1
 8003656:	e7f2      	b.n	800363e <__libc_init_array+0x1e>
 8003658:	080036b0 	.word	0x080036b0
 800365c:	080036b0 	.word	0x080036b0
 8003660:	080036b0 	.word	0x080036b0
 8003664:	080036b4 	.word	0x080036b4

08003668 <memset>:
 8003668:	4402      	add	r2, r0
 800366a:	4603      	mov	r3, r0
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	f803 1b01 	strb.w	r1, [r3], #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <_init>:
 8003678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800367a:	bf00      	nop
 800367c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800367e:	bc08      	pop	{r3}
 8003680:	469e      	mov	lr, r3
 8003682:	4770      	bx	lr

08003684 <_fini>:
 8003684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003686:	bf00      	nop
 8003688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368a:	bc08      	pop	{r3}
 800368c:	469e      	mov	lr, r3
 800368e:	4770      	bx	lr
