
F411_nucleo_IIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000333c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080034d4  080034d4  000134d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034f4  080034f4  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034f4  080034f4  000134f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080034fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008170  20000034  08003530  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200081a4  08003530  000281a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087a3  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b1d  00000000  00000000  00028807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e0  00000000  00000000  0002a328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f8  00000000  00000000  0002aa08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001581c  00000000  00000000  0002b000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009274  00000000  00000000  0004081c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000855b8  00000000  00000000  00049a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c1  00000000  00000000  000cf048  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019ac  00000000  00000000  000cf10c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000005f0  00000000  00000000  000d0ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000034 	.word	0x20000034
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080034bc 	.word	0x080034bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000038 	.word	0x20000038
 80001d4:	080034bc 	.word	0x080034bc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d6:	f000 fc07 	bl	8000ce8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004da:	f000 f91b 	bl	8000714 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004de:	f000 f9d9 	bl	8000894 <MX_GPIO_Init>
	MX_DMA_Init();
 80004e2:	f000 f9af 	bl	8000844 <MX_DMA_Init>
	MX_I2S2_Init();
 80004e6:	f000 f97d 	bl	80007e4 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */

	// init IIR structure
	arm_biquad_cascade_df1_init_f32(&iir_settings_l, 1, &biquad_hp_350_05[0],
 80004ea:	4b79      	ldr	r3, [pc, #484]	; (80006d0 <main+0x200>)
 80004ec:	4a79      	ldr	r2, [pc, #484]	; (80006d4 <main+0x204>)
 80004ee:	2101      	movs	r1, #1
 80004f0:	4879      	ldr	r0, [pc, #484]	; (80006d8 <main+0x208>)
 80004f2:	f002 fedb 	bl	80032ac <arm_biquad_cascade_df1_init_f32>
			&iir_l_state[0]);
	arm_biquad_cascade_df1_init_f32(&iir_settings_r, 1, &biquad_lp_350_05[0],
 80004f6:	4b79      	ldr	r3, [pc, #484]	; (80006dc <main+0x20c>)
 80004f8:	4a79      	ldr	r2, [pc, #484]	; (80006e0 <main+0x210>)
 80004fa:	2101      	movs	r1, #1
 80004fc:	4879      	ldr	r0, [pc, #484]	; (80006e4 <main+0x214>)
 80004fe:	f002 fed5 	bl	80032ac <arm_biquad_cascade_df1_init_f32>
			&iir_r_state[0]);

	// start i2s with 2048 samples transmission => 4096*u16 words
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, txBuf, rxBuf, BLOCK_SIZE_U16);
 8000502:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000506:	4a78      	ldr	r2, [pc, #480]	; (80006e8 <main+0x218>)
 8000508:	4978      	ldr	r1, [pc, #480]	; (80006ec <main+0x21c>)
 800050a:	4879      	ldr	r0, [pc, #484]	; (80006f0 <main+0x220>)
 800050c:	f001 fcaa 	bl	8001e64 <HAL_I2SEx_TransmitReceive_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (callback_state != 0) {
 8000510:	4b78      	ldr	r3, [pc, #480]	; (80006f4 <main+0x224>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d0fb      	beq.n	8000510 <main+0x40>

			//decide if it was half or cplt callback
			if (callback_state == 1) {
 8000518:	4b76      	ldr	r3, [pc, #472]	; (80006f4 <main+0x224>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d109      	bne.n	8000534 <main+0x64>
				offset_r_ptr = 0;
 8000520:	4b75      	ldr	r3, [pc, #468]	; (80006f8 <main+0x228>)
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
				offset_w_ptr = 0;
 8000526:	4b75      	ldr	r3, [pc, #468]	; (80006fc <main+0x22c>)
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
				w_ptr = 0;
 800052c:	4b74      	ldr	r3, [pc, #464]	; (8000700 <main+0x230>)
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	e00f      	b.n	8000554 <main+0x84>
			}

			else if (callback_state == 2) {
 8000534:	4b6f      	ldr	r3, [pc, #444]	; (80006f4 <main+0x224>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b02      	cmp	r3, #2
 800053a:	d10b      	bne.n	8000554 <main+0x84>
				offset_r_ptr = BLOCK_SIZE_U16;
 800053c:	4b6e      	ldr	r3, [pc, #440]	; (80006f8 <main+0x228>)
 800053e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000542:	601a      	str	r2, [r3, #0]
				offset_w_ptr = BLOCK_SIZE_FLOAT;
 8000544:	4b6d      	ldr	r3, [pc, #436]	; (80006fc <main+0x22c>)
 8000546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800054a:	601a      	str	r2, [r3, #0]
				w_ptr = BLOCK_SIZE_FLOAT;
 800054c:	4b6c      	ldr	r3, [pc, #432]	; (8000700 <main+0x230>)
 800054e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000552:	601a      	str	r2, [r3, #0]
			}

			//restore input sample buffer to float array
			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16;
 8000554:	4b68      	ldr	r3, [pc, #416]	; (80006f8 <main+0x228>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	e034      	b.n	80005c6 <main+0xf6>
					i = i + 4) {
				l_buf_in[w_ptr] =
						(float) ((int) (rxBuf[i] << 16) | rxBuf[i + 1]);
 800055c:	4a62      	ldr	r2, [pc, #392]	; (80006e8 <main+0x218>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000564:	041b      	lsls	r3, r3, #16
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	3201      	adds	r2, #1
 800056a:	495f      	ldr	r1, [pc, #380]	; (80006e8 <main+0x218>)
 800056c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000570:	431a      	orrs	r2, r3
				l_buf_in[w_ptr] =
 8000572:	4b63      	ldr	r3, [pc, #396]	; (8000700 <main+0x230>)
 8000574:	681b      	ldr	r3, [r3, #0]
						(float) ((int) (rxBuf[i] << 16) | rxBuf[i + 1]);
 8000576:	ee07 2a90 	vmov	s15, r2
 800057a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				l_buf_in[w_ptr] =
 800057e:	4a61      	ldr	r2, [pc, #388]	; (8000704 <main+0x234>)
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	4413      	add	r3, r2
 8000584:	edc3 7a00 	vstr	s15, [r3]
				r_buf_in[w_ptr] = (float) ((int) (rxBuf[i + 2] << 16)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3302      	adds	r3, #2
 800058c:	4a56      	ldr	r2, [pc, #344]	; (80006e8 <main+0x218>)
 800058e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000592:	041b      	lsls	r3, r3, #16
						| rxBuf[i + 3]);
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	3203      	adds	r2, #3
 8000598:	4953      	ldr	r1, [pc, #332]	; (80006e8 <main+0x218>)
 800059a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800059e:	431a      	orrs	r2, r3
				r_buf_in[w_ptr] = (float) ((int) (rxBuf[i + 2] << 16)
 80005a0:	4b57      	ldr	r3, [pc, #348]	; (8000700 <main+0x230>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	ee07 2a90 	vmov	s15, r2
 80005a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ac:	4a56      	ldr	r2, [pc, #344]	; (8000708 <main+0x238>)
 80005ae:	009b      	lsls	r3, r3, #2
 80005b0:	4413      	add	r3, r2
 80005b2:	edc3 7a00 	vstr	s15, [r3]
				w_ptr++;
 80005b6:	4b52      	ldr	r3, [pc, #328]	; (8000700 <main+0x230>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	4a50      	ldr	r2, [pc, #320]	; (8000700 <main+0x230>)
 80005be:	6013      	str	r3, [r2, #0]
					i = i + 4) {
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	3304      	adds	r3, #4
 80005c4:	607b      	str	r3, [r7, #4]
			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16;
 80005c6:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <main+0x228>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	429a      	cmp	r2, r3
 80005d2:	ddc3      	ble.n	800055c <main+0x8c>
			}

			//process IIR
			arm_biquad_cascade_df1_f32(&iir_settings_l, &l_buf_in[offset_w_ptr],
 80005d4:	4b49      	ldr	r3, [pc, #292]	; (80006fc <main+0x22c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	4a4a      	ldr	r2, [pc, #296]	; (8000704 <main+0x234>)
 80005dc:	1899      	adds	r1, r3, r2
					&l_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 80005de:	4b47      	ldr	r3, [pc, #284]	; (80006fc <main+0x22c>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4a49      	ldr	r2, [pc, #292]	; (800070c <main+0x23c>)
 80005e6:	441a      	add	r2, r3
			arm_biquad_cascade_df1_f32(&iir_settings_l, &l_buf_in[offset_w_ptr],
 80005e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ec:	483a      	ldr	r0, [pc, #232]	; (80006d8 <main+0x208>)
 80005ee:	f002 fe69 	bl	80032c4 <arm_biquad_cascade_df1_f32>
			arm_biquad_cascade_df1_f32(&iir_settings_r, &r_buf_in[offset_w_ptr],
 80005f2:	4b42      	ldr	r3, [pc, #264]	; (80006fc <main+0x22c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4a43      	ldr	r2, [pc, #268]	; (8000708 <main+0x238>)
 80005fa:	1899      	adds	r1, r3, r2
					&r_buf_out[offset_w_ptr], BLOCK_SIZE_FLOAT);
 80005fc:	4b3f      	ldr	r3, [pc, #252]	; (80006fc <main+0x22c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4a43      	ldr	r2, [pc, #268]	; (8000710 <main+0x240>)
 8000604:	441a      	add	r2, r3
			arm_biquad_cascade_df1_f32(&iir_settings_r, &r_buf_in[offset_w_ptr],
 8000606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800060a:	4836      	ldr	r0, [pc, #216]	; (80006e4 <main+0x214>)
 800060c:	f002 fe5a 	bl	80032c4 <arm_biquad_cascade_df1_f32>

			//restore processed float-array to output sample-buffer
			w_ptr = offset_w_ptr;
 8000610:	4b3a      	ldr	r3, [pc, #232]	; (80006fc <main+0x22c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a3a      	ldr	r2, [pc, #232]	; (8000700 <main+0x230>)
 8000616:	6013      	str	r3, [r2, #0]

			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16;
 8000618:	4b37      	ldr	r3, [pc, #220]	; (80006f8 <main+0x228>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	e04c      	b.n	80006ba <main+0x1ea>
					i = i + 4) {
				txBuf[i] = (((int) l_buf_out[w_ptr]) >> 16) & 0xFFFF;
 8000620:	4b37      	ldr	r3, [pc, #220]	; (8000700 <main+0x230>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a39      	ldr	r2, [pc, #228]	; (800070c <main+0x23c>)
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	4413      	add	r3, r2
 800062a:	edd3 7a00 	vldr	s15, [r3]
 800062e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000632:	ee17 3a90 	vmov	r3, s15
 8000636:	0c1b      	lsrs	r3, r3, #16
 8000638:	b299      	uxth	r1, r3
 800063a:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <main+0x21c>)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i + 1] = ((int) l_buf_out[w_ptr]) & 0xFFFF;
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <main+0x230>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a31      	ldr	r2, [pc, #196]	; (800070c <main+0x23c>)
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	edd3 7a00 	vldr	s15, [r3]
 8000650:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	3301      	adds	r3, #1
 8000658:	ee17 2a90 	vmov	r2, s15
 800065c:	b291      	uxth	r1, r2
 800065e:	4a23      	ldr	r2, [pc, #140]	; (80006ec <main+0x21c>)
 8000660:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i + 2] = (((int) r_buf_out[w_ptr]) >> 16) & 0xFFFF;
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <main+0x230>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a29      	ldr	r2, [pc, #164]	; (8000710 <main+0x240>)
 800066a:	009b      	lsls	r3, r3, #2
 800066c:	4413      	add	r3, r2
 800066e:	edd3 7a00 	vldr	s15, [r3]
 8000672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000676:	ee17 3a90 	vmov	r3, s15
 800067a:	0c1a      	lsrs	r2, r3, #16
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	3302      	adds	r3, #2
 8000680:	b291      	uxth	r1, r2
 8000682:	4a1a      	ldr	r2, [pc, #104]	; (80006ec <main+0x21c>)
 8000684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				txBuf[i + 3] = ((int) r_buf_out[w_ptr]) & 0xFFFF;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <main+0x230>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a20      	ldr	r2, [pc, #128]	; (8000710 <main+0x240>)
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	4413      	add	r3, r2
 8000692:	edd3 7a00 	vldr	s15, [r3]
 8000696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	3303      	adds	r3, #3
 800069e:	ee17 2a90 	vmov	r2, s15
 80006a2:	b291      	uxth	r1, r2
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <main+0x21c>)
 80006a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				w_ptr++;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <main+0x230>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <main+0x230>)
 80006b2:	6013      	str	r3, [r2, #0]
					i = i + 4) {
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	3304      	adds	r3, #4
 80006b8:	603b      	str	r3, [r7, #0]
			for (int i = offset_r_ptr; i < offset_r_ptr + BLOCK_SIZE_U16;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <main+0x228>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80006c2:	683a      	ldr	r2, [r7, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	ddab      	ble.n	8000620 <main+0x150>
			}

			callback_state = 0;
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <main+0x224>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	701a      	strb	r2, [r3, #0]
		if (callback_state != 0) {
 80006ce:	e71f      	b.n	8000510 <main+0x40>
 80006d0:	20004070 	.word	0x20004070
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20004064 	.word	0x20004064
 80006dc:	20007084 	.word	0x20007084
 80006e0:	20000014 	.word	0x20000014
 80006e4:	20000054 	.word	0x20000054
 80006e8:	20005080 	.word	0x20005080
 80006ec:	20001064 	.word	0x20001064
 80006f0:	20007158 	.word	0x20007158
 80006f4:	20000050 	.word	0x20000050
 80006f8:	20007094 	.word	0x20007094
 80006fc:	20007080 	.word	0x20007080
 8000700:	20001060 	.word	0x20001060
 8000704:	20003064 	.word	0x20003064
 8000708:	200071a0 	.word	0x200071a0
 800070c:	20004080 	.word	0x20004080
 8000710:	20000060 	.word	0x20000060

08000714 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fec2 	bl	80034ac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b27      	ldr	r3, [pc, #156]	; (80007dc <SystemClock_Config+0xc8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a26      	ldr	r2, [pc, #152]	; (80007dc <SystemClock_Config+0xc8>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <SystemClock_Config+0xc8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <SystemClock_Config+0xcc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a20      	ldr	r2, [pc, #128]	; (80007e0 <SystemClock_Config+0xcc>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <SystemClock_Config+0xcc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8000788:	2364      	movs	r3, #100	; 0x64
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000790:	2304      	movs	r3, #4
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fff7 	bl	800278c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
		Error_Handler();
 80007a4:	f000 f8da 	bl	800095c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2103      	movs	r1, #3
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fa59 	bl	8002c7c <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xc0>
		Error_Handler();
 80007d0:	f000 f8c4 	bl	800095c <Error_Handler>
	}
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <MX_I2S2_Init+0x54>)
 80007ea:	4a14      	ldr	r2, [pc, #80]	; (800083c <MX_I2S2_Init+0x58>)
 80007ec:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2S2_Init+0x54>)
 80007f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f4:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <MX_I2S2_Init+0x54>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_I2S2_Init+0x54>)
 80007fe:	2203      	movs	r2, #3
 8000800:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <MX_I2S2_Init+0x54>)
 8000804:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000808:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <MX_I2S2_Init+0x54>)
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <MX_I2S2_Init+0x5c>)
 800080e:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_I2S2_Init+0x54>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <MX_I2S2_Init+0x54>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2S2_Init+0x54>)
 800081e:	2201      	movs	r2, #1
 8000820:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_I2S2_Init+0x54>)
 8000824:	f001 f8d8 	bl	80019d8 <HAL_I2S_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2S2_Init+0x4e>
		Error_Handler();
 800082e:	f000 f895 	bl	800095c <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20007158 	.word	0x20007158
 800083c:	40003800 	.word	0x40003800
 8000840:	00017700 	.word	0x00017700

08000844 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <MX_DMA_Init+0x4c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <MX_DMA_Init+0x4c>)
 8000854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <MX_DMA_Init+0x4c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	200e      	movs	r0, #14
 800086c:	f000 fb89 	bl	8000f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000870:	200e      	movs	r0, #14
 8000872:	f000 fba2 	bl	8000fba <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	200f      	movs	r0, #15
 800087c:	f000 fb81 	bl	8000f82 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000880:	200f      	movs	r0, #15
 8000882:	f000 fb9a 	bl	8000fba <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800

08000894 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <MX_GPIO_Init+0x84>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <MX_GPIO_Init+0x84>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_GPIO_Init+0x84>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_GPIO_Init+0x84>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <MX_GPIO_Init+0x84>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_GPIO_Init+0x84>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_GPIO_Init+0x84>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a0f      	ldr	r2, [pc, #60]	; (8000918 <MX_GPIO_Init+0x84>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_GPIO_Init+0x84>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_GPIO_Init+0x84>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a08      	ldr	r2, [pc, #32]	; (8000918 <MX_GPIO_Init+0x84>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_GPIO_Init+0x84>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

}
 800090a:	bf00      	nop
 800090c:	3714      	adds	r7, #20
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <HAL_I2SEx_TxRxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	callback_state = 1;
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <HAL_I2SEx_TxRxHalfCpltCallback+0x1c>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]

}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	20000050 	.word	0x20000050

0800093c <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	callback_state = 2;
 8000944:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_I2SEx_TxRxCpltCallback+0x1c>)
 8000946:	2202      	movs	r2, #2
 8000948:	701a      	strb	r2, [r3, #0]
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000050 	.word	0x20000050

0800095c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000964:	e7fe      	b.n	8000964 <Error_Handler+0x8>
	...

08000968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x4c>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x4c>)
 8000978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800097c:	6453      	str	r3, [r2, #68]	; 0x44
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x4c>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <HAL_MspInit+0x4c>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a08      	ldr	r2, [pc, #32]	; (80009b4 <HAL_MspInit+0x4c>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_MspInit+0x4c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009a6:	2007      	movs	r0, #7
 80009a8:	f000 fae0 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40023800 	.word	0x40023800

080009b8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b092      	sub	sp, #72	; 0x48
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	615a      	str	r2, [r3, #20]
  if(hi2s->Instance==SPI2)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a7a      	ldr	r2, [pc, #488]	; (8000bd0 <HAL_I2S_MspInit+0x218>)
 80009e8:	4293      	cmp	r3, r2
 80009ea:	f040 80ec 	bne.w	8000bc6 <HAL_I2S_MspInit+0x20e>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009ee:	2301      	movs	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009f2:	23c0      	movs	r3, #192	; 0xc0
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80009f6:	2308      	movs	r3, #8
 80009f8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fb02 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_I2S_MspInit+0x5a>
    {
      Error_Handler();
 8000a0e:	f7ff ffa5 	bl	800095c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	4b6f      	ldr	r3, [pc, #444]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1a:	4a6e      	ldr	r2, [pc, #440]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6413      	str	r3, [r2, #64]	; 0x40
 8000a22:	4b6c      	ldr	r3, [pc, #432]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	61bb      	str	r3, [r7, #24]
 8000a2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	4b68      	ldr	r3, [pc, #416]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a67      	ldr	r2, [pc, #412]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b65      	ldr	r3, [pc, #404]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b61      	ldr	r3, [pc, #388]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a60      	ldr	r2, [pc, #384]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b5e      	ldr	r3, [pc, #376]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b5a      	ldr	r3, [pc, #360]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a59      	ldr	r2, [pc, #356]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b57      	ldr	r3, [pc, #348]	; (8000bd4 <HAL_I2S_MspInit+0x21c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> I2S2_SD
    PA6     ------> I2S2_MCK
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a82:	2304      	movs	r3, #4
 8000a84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a92:	2306      	movs	r3, #6
 8000a94:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	484e      	ldr	r0, [pc, #312]	; (8000bd8 <HAL_I2S_MspInit+0x220>)
 8000a9e:	f000 fe17 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ab6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aba:	4619      	mov	r1, r3
 8000abc:	4846      	ldr	r0, [pc, #280]	; (8000bd8 <HAL_I2S_MspInit+0x220>)
 8000abe:	f000 fe07 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ada:	4619      	mov	r1, r3
 8000adc:	483f      	ldr	r0, [pc, #252]	; (8000bdc <HAL_I2S_MspInit+0x224>)
 8000ade:	f000 fdf7 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000ae2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af4:	2305      	movs	r3, #5
 8000af6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000afc:	4619      	mov	r1, r3
 8000afe:	4838      	ldr	r0, [pc, #224]	; (8000be0 <HAL_I2S_MspInit+0x228>)
 8000b00:	f000 fde6 	bl	80016d0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000b04:	4b37      	ldr	r3, [pc, #220]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b06:	4a38      	ldr	r2, [pc, #224]	; (8000be8 <HAL_I2S_MspInit+0x230>)
 8000b08:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000b0a:	4b36      	ldr	r3, [pc, #216]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b0c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b10:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b12:	4b34      	ldr	r3, [pc, #208]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b32      	ldr	r3, [pc, #200]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b31      	ldr	r3, [pc, #196]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b24:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b26:	4b2f      	ldr	r3, [pc, #188]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b2c:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b2e:	4b2d      	ldr	r3, [pc, #180]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b34:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000b36:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b3c:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3e:	4b29      	ldr	r3, [pc, #164]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000b4a:	4826      	ldr	r0, [pc, #152]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b4c:	f000 fa50 	bl	8000ff0 <HAL_DMA_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_I2S_MspInit+0x1a2>
    {
      Error_Handler();
 8000b56:	f7ff ff01 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b60:	4a20      	ldr	r2, [pc, #128]	; (8000be4 <HAL_I2S_MspInit+0x22c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b66:	4b21      	ldr	r3, [pc, #132]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b68:	4a21      	ldr	r2, [pc, #132]	; (8000bf0 <HAL_I2S_MspInit+0x238>)
 8000b6a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b6c:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b72:	4b1e      	ldr	r3, [pc, #120]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b74:	2240      	movs	r2, #64	; 0x40
 8000b76:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b84:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b94:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000b98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b9c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000baa:	4810      	ldr	r0, [pc, #64]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000bac:	f000 fa20 	bl	8000ff0 <HAL_DMA_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_I2S_MspInit+0x202>
    {
      Error_Handler();
 8000bb6:	f7ff fed1 	bl	800095c <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38
 8000bc0:	4a0a      	ldr	r2, [pc, #40]	; (8000bec <HAL_I2S_MspInit+0x234>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3748      	adds	r7, #72	; 0x48
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40003800 	.word	0x40003800
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020800 	.word	0x40020800
 8000bdc:	40020000 	.word	0x40020000
 8000be0:	40020400 	.word	0x40020400
 8000be4:	20007098 	.word	0x20007098
 8000be8:	40026058 	.word	0x40026058
 8000bec:	200070f8 	.word	0x200070f8
 8000bf0:	40026070 	.word	0x40026070

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f8a4 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <DMA1_Stream3_IRQHandler+0x10>)
 8000c4e:	f000 fad5 	bl	80011fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20007098 	.word	0x20007098

08000c5c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <DMA1_Stream4_IRQHandler+0x10>)
 8000c62:	f000 facb 	bl	80011fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200070f8 	.word	0x200070f8

08000c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <SystemInit+0x20>)
 8000c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <SystemInit+0x20>)
 8000c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ccc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c98:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c9a:	490e      	ldr	r1, [pc, #56]	; (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c9c:	4a0e      	ldr	r2, [pc, #56]	; (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a0b      	ldr	r2, [pc, #44]	; (8000cdc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cbe:	f7ff ffd7 	bl	8000c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc2:	f002 fbcf 	bl	8003464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cc6:	f7ff fc03 	bl	80004d0 <main>
  bx  lr    
 8000cca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ccc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000cd8:	080034fc 	.word	0x080034fc
  ldr r2, =_sbss
 8000cdc:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000ce0:	200081a4 	.word	0x200081a4

08000ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <HAL_Init+0x40>)
 8000cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cf8:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <HAL_Init+0x40>)
 8000cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x40>)
 8000d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 f92b 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	2000      	movs	r0, #0
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe24 	bl	8000968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023c00 	.word	0x40023c00

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f943 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f90b 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000028 	.word	0x20000028
 8000d84:	20000030 	.word	0x20000030
 8000d88:	2000002c 	.word	0x2000002c

08000d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x20>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_IncTick+0x24>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_IncTick+0x24>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000030 	.word	0x20000030
 8000db0:	200081a0 	.word	0x200081a0

08000db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  return uwTick;
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_GetTick+0x14>)
 8000dba:	681b      	ldr	r3, [r3, #0]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	200081a0 	.word	0x200081a0

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff3e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff31 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff feda 	bl	8000db4 <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e099      	b.n	8001140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2202      	movs	r2, #2
 8001010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102c:	e00f      	b.n	800104e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800102e:	f7ff fec1 	bl	8000db4 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b05      	cmp	r3, #5
 800103a:	d908      	bls.n	800104e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e078      	b.n	8001140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e8      	bne.n	800102e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_DMA_Init+0x158>)
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800107a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d107      	bne.n	80010b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4313      	orrs	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f023 0307 	bic.w	r3, r3, #7
 80010ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d117      	bne.n	8001112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fa6f 	bl	80015d8 <DMA_CheckFifoParam>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800110e:	2301      	movs	r3, #1
 8001110:	e016      	b.n	8001140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fa26 	bl	800156c <DMA_CalcBaseAndBitshift>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	f010803f 	.word	0xf010803f

0800114c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_DMA_Start_IT+0x26>
 800116e:	2302      	movs	r3, #2
 8001170:	e040      	b.n	80011f4 <HAL_DMA_Start_IT+0xa8>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d12f      	bne.n	80011e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f9b8 	bl	8001510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	223f      	movs	r2, #63	; 0x3f
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0216 	orr.w	r2, r2, #22
 80011ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d007      	beq.n	80011d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0208 	orr.w	r2, r2, #8
 80011d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	e005      	b.n	80011f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011ee:	2302      	movs	r3, #2
 80011f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001208:	4b92      	ldr	r3, [pc, #584]	; (8001454 <HAL_DMA_IRQHandler+0x258>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a92      	ldr	r2, [pc, #584]	; (8001458 <HAL_DMA_IRQHandler+0x25c>)
 800120e:	fba2 2303 	umull	r2, r3, r2, r3
 8001212:	0a9b      	lsrs	r3, r3, #10
 8001214:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800121a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001226:	2208      	movs	r2, #8
 8001228:	409a      	lsls	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d01a      	beq.n	8001268 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0204 	bic.w	r2, r2, #4
 800124e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001254:	2208      	movs	r2, #8
 8001256:	409a      	lsls	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800126c:	2201      	movs	r2, #1
 800126e:	409a      	lsls	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	4013      	ands	r3, r2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d012      	beq.n	800129e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00b      	beq.n	800129e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800128a:	2201      	movs	r2, #1
 800128c:	409a      	lsls	r2, r3
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001296:	f043 0202 	orr.w	r2, r3, #2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012a2:	2204      	movs	r2, #4
 80012a4:	409a      	lsls	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4013      	ands	r3, r2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d012      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d00b      	beq.n	80012d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2204      	movs	r2, #4
 80012c2:	409a      	lsls	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	f043 0204 	orr.w	r2, r3, #4
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	2210      	movs	r2, #16
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d043      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d03c      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2210      	movs	r2, #16
 80012f8:	409a      	lsls	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d018      	beq.n	800133e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d108      	bne.n	800132c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d024      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	4798      	blx	r3
 800132a:	e01f      	b.n	800136c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001330:	2b00      	cmp	r3, #0
 8001332:	d01b      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
 800133c:	e016      	b.n	800136c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d107      	bne.n	800135c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0208 	bic.w	r2, r2, #8
 800135a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	2220      	movs	r2, #32
 8001372:	409a      	lsls	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 808e 	beq.w	800149a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0310 	and.w	r3, r3, #16
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8086 	beq.w	800149a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	2220      	movs	r2, #32
 8001394:	409a      	lsls	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b05      	cmp	r3, #5
 80013a4:	d136      	bne.n	8001414 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0216 	bic.w	r2, r2, #22
 80013b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	695a      	ldr	r2, [r3, #20]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d103      	bne.n	80013d6 <HAL_DMA_IRQHandler+0x1da>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d007      	beq.n	80013e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f022 0208 	bic.w	r2, r2, #8
 80013e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ea:	223f      	movs	r2, #63	; 0x3f
 80013ec:	409a      	lsls	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001406:	2b00      	cmp	r3, #0
 8001408:	d07d      	beq.n	8001506 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	4798      	blx	r3
        }
        return;
 8001412:	e078      	b.n	8001506 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01c      	beq.n	800145c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d108      	bne.n	8001442 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	2b00      	cmp	r3, #0
 8001436:	d030      	beq.n	800149a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
 8001440:	e02b      	b.n	800149a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001446:	2b00      	cmp	r3, #0
 8001448:	d027      	beq.n	800149a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	4798      	blx	r3
 8001452:	e022      	b.n	800149a <HAL_DMA_IRQHandler+0x29e>
 8001454:	20000028 	.word	0x20000028
 8001458:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0210 	bic.w	r2, r2, #16
 8001478:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d032      	beq.n	8001508 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d022      	beq.n	80014f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2205      	movs	r2, #5
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0201 	bic.w	r2, r2, #1
 80014c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d307      	bcc.n	80014e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f2      	bne.n	80014c6 <HAL_DMA_IRQHandler+0x2ca>
 80014e0:	e000      	b.n	80014e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014e2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d005      	beq.n	8001508 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	4798      	blx	r3
 8001504:	e000      	b.n	8001508 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001506:	bf00      	nop
    }
  }
}
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop

08001510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001510:	b480      	push	{r7}
 8001512:	b085      	sub	sp, #20
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800152c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	d108      	bne.n	8001550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800154e:	e007      	b.n	8001560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	68ba      	ldr	r2, [r7, #8]
 8001556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	687a      	ldr	r2, [r7, #4]
 800155e:	60da      	str	r2, [r3, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	3b10      	subs	r3, #16
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <DMA_CalcBaseAndBitshift+0x64>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	091b      	lsrs	r3, r3, #4
 8001584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	4413      	add	r3, r2
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d909      	bls.n	80015ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015a2:	f023 0303 	bic.w	r3, r3, #3
 80015a6:	1d1a      	adds	r2, r3, #4
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	659a      	str	r2, [r3, #88]	; 0x58
 80015ac:	e007      	b.n	80015be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	aaaaaaab 	.word	0xaaaaaaab
 80015d4:	080034e4 	.word	0x080034e4

080015d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11f      	bne.n	8001632 <DMA_CheckFifoParam+0x5a>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d856      	bhi.n	80016a6 <DMA_CheckFifoParam+0xce>
 80015f8:	a201      	add	r2, pc, #4	; (adr r2, 8001600 <DMA_CheckFifoParam+0x28>)
 80015fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fe:	bf00      	nop
 8001600:	08001611 	.word	0x08001611
 8001604:	08001623 	.word	0x08001623
 8001608:	08001611 	.word	0x08001611
 800160c:	080016a7 	.word	0x080016a7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d046      	beq.n	80016aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001620:	e043      	b.n	80016aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800162a:	d140      	bne.n	80016ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001630:	e03d      	b.n	80016ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800163a:	d121      	bne.n	8001680 <DMA_CheckFifoParam+0xa8>
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	2b03      	cmp	r3, #3
 8001640:	d837      	bhi.n	80016b2 <DMA_CheckFifoParam+0xda>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <DMA_CheckFifoParam+0x70>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	08001659 	.word	0x08001659
 800164c:	0800165f 	.word	0x0800165f
 8001650:	08001659 	.word	0x08001659
 8001654:	08001671 	.word	0x08001671
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	73fb      	strb	r3, [r7, #15]
      break;
 800165c:	e030      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d025      	beq.n	80016b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800166e:	e022      	b.n	80016b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001678:	d11f      	bne.n	80016ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800167e:	e01c      	b.n	80016ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b02      	cmp	r3, #2
 8001684:	d903      	bls.n	800168e <DMA_CheckFifoParam+0xb6>
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b03      	cmp	r3, #3
 800168a:	d003      	beq.n	8001694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800168c:	e018      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	73fb      	strb	r3, [r7, #15]
      break;
 8001692:	e015      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d00e      	beq.n	80016be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      break;
 80016a4:	e00b      	b.n	80016be <DMA_CheckFifoParam+0xe6>
      break;
 80016a6:	bf00      	nop
 80016a8:	e00a      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016aa:	bf00      	nop
 80016ac:	e008      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016ae:	bf00      	nop
 80016b0:	e006      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016b2:	bf00      	nop
 80016b4:	e004      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016b6:	bf00      	nop
 80016b8:	e002      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80016ba:	bf00      	nop
 80016bc:	e000      	b.n	80016c0 <DMA_CheckFifoParam+0xe8>
      break;
 80016be:	bf00      	nop
    }
  } 
  
  return status; 
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e159      	b.n	80019a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ec:	2201      	movs	r2, #1
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8148 	bne.w	800199a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b01      	cmp	r3, #1
 8001714:	d005      	beq.n	8001722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171e:	2b02      	cmp	r3, #2
 8001720:	d130      	bne.n	8001784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2203      	movs	r2, #3
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	4013      	ands	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001758:	2201      	movs	r2, #1
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	091b      	lsrs	r3, r3, #4
 800176e:	f003 0201 	and.w	r2, r3, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 0303 	and.w	r3, r3, #3
 800178c:	2b03      	cmp	r3, #3
 800178e:	d017      	beq.n	80017c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	2203      	movs	r2, #3
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	43db      	mvns	r3, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4013      	ands	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d123      	bne.n	8001814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	08da      	lsrs	r2, r3, #3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3208      	adds	r2, #8
 80017d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	220f      	movs	r2, #15
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	08da      	lsrs	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3208      	adds	r2, #8
 800180e:	69b9      	ldr	r1, [r7, #24]
 8001810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	2203      	movs	r2, #3
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0203 	and.w	r2, r3, #3
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a2 	beq.w	800199a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b57      	ldr	r3, [pc, #348]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	4a56      	ldr	r2, [pc, #344]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001864:	6453      	str	r3, [r2, #68]	; 0x44
 8001866:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <HAL_GPIO_Init+0x2e8>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186e:	60fb      	str	r3, [r7, #12]
 8001870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001872:	4a52      	ldr	r2, [pc, #328]	; (80019bc <HAL_GPIO_Init+0x2ec>)
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0303 	and.w	r3, r3, #3
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	220f      	movs	r2, #15
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a49      	ldr	r2, [pc, #292]	; (80019c0 <HAL_GPIO_Init+0x2f0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0x202>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_GPIO_Init+0x2f4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x1fe>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a47      	ldr	r2, [pc, #284]	; (80019c8 <HAL_GPIO_Init+0x2f8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x1fa>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a46      	ldr	r2, [pc, #280]	; (80019cc <HAL_GPIO_Init+0x2fc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x1f6>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <HAL_GPIO_Init+0x300>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x1f2>
 80018be:	2304      	movs	r3, #4
 80018c0:	e008      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018c2:	2307      	movs	r3, #7
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e004      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e002      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <HAL_GPIO_Init+0x204>
 80018d2:	2300      	movs	r3, #0
 80018d4:	69fa      	ldr	r2, [r7, #28]
 80018d6:	f002 0203 	and.w	r2, r2, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	4093      	lsls	r3, r2
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e4:	4935      	ldr	r1, [pc, #212]	; (80019bc <HAL_GPIO_Init+0x2ec>)
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	3302      	adds	r3, #2
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <HAL_GPIO_Init+0x304>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001916:	4a2f      	ldr	r2, [pc, #188]	; (80019d4 <HAL_GPIO_Init+0x304>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800191c:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <HAL_GPIO_Init+0x304>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <HAL_GPIO_Init+0x304>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_GPIO_Init+0x304>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <HAL_GPIO_Init+0x304>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_GPIO_Init+0x304>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_GPIO_Init+0x304>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b0f      	cmp	r3, #15
 80019a4:	f67f aea2 	bls.w	80016ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40020000 	.word	0x40020000
 80019c4:	40020400 	.word	0x40020400
 80019c8:	40020800 	.word	0x40020800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40021000 	.word	0x40021000
 80019d4:	40013c00 	.word	0x40013c00

080019d8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e128      	b.n	8001c3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a90      	ldr	r2, [pc, #576]	; (8001c44 <HAL_I2S_Init+0x26c>)
 8001a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7fe ffd7 	bl	80009b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a20:	f023 030f 	bic.w	r3, r3, #15
 8001a24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d060      	beq.n	8001af8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a3e:	2310      	movs	r3, #16
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e001      	b.n	8001a48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a44:	2320      	movs	r3, #32
 8001a46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d802      	bhi.n	8001a56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a56:	2001      	movs	r0, #1
 8001a58:	f001 fbc8 	bl	80031ec <HAL_RCCEx_GetPeriphCLKFreq>
 8001a5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a66:	d125      	bne.n	8001ab4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d010      	beq.n	8001a92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	009b      	lsls	r3, r3, #2
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	461a      	mov	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a8c:	3305      	adds	r3, #5
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	e01f      	b.n	8001ad2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	3305      	adds	r3, #5
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	e00e      	b.n	8001ad2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001ab4:	68fa      	ldr	r2, [r7, #12]
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ace:	3305      	adds	r3, #5
 8001ad0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <HAL_I2S_Init+0x270>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	085b      	lsrs	r3, r3, #1
 8001aee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	021b      	lsls	r3, r3, #8
 8001af4:	61bb      	str	r3, [r7, #24]
 8001af6:	e003      	b.n	8001b00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001af8:	2302      	movs	r3, #2
 8001afa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d902      	bls.n	8001b0c <HAL_I2S_Init+0x134>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	2bff      	cmp	r3, #255	; 0xff
 8001b0a:	d907      	bls.n	8001b1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b10:	f043 0210 	orr.w	r2, r3, #16
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e08f      	b.n	8001c3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691a      	ldr	r2, [r3, #16]
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	ea42 0103 	orr.w	r1, r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b3a:	f023 030f 	bic.w	r3, r3, #15
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6851      	ldr	r1, [r2, #4]
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6892      	ldr	r2, [r2, #8]
 8001b46:	4311      	orrs	r1, r2
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68d2      	ldr	r2, [r2, #12]
 8001b4c:	4311      	orrs	r1, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	6992      	ldr	r2, [r2, #24]
 8001b52:	430a      	orrs	r2, r1
 8001b54:	431a      	orrs	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d161      	bne.n	8001c2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a38      	ldr	r2, [pc, #224]	; (8001c4c <HAL_I2S_Init+0x274>)
 8001b6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a37      	ldr	r2, [pc, #220]	; (8001c50 <HAL_I2S_Init+0x278>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d101      	bne.n	8001b7c <HAL_I2S_Init+0x1a4>
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_I2S_Init+0x27c>)
 8001b7a:	e001      	b.n	8001b80 <HAL_I2S_Init+0x1a8>
 8001b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	687a      	ldr	r2, [r7, #4]
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	4932      	ldr	r1, [pc, #200]	; (8001c50 <HAL_I2S_Init+0x278>)
 8001b88:	428a      	cmp	r2, r1
 8001b8a:	d101      	bne.n	8001b90 <HAL_I2S_Init+0x1b8>
 8001b8c:	4a31      	ldr	r2, [pc, #196]	; (8001c54 <HAL_I2S_Init+0x27c>)
 8001b8e:	e001      	b.n	8001b94 <HAL_I2S_Init+0x1bc>
 8001b90:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001b94:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001b98:	f023 030f 	bic.w	r3, r3, #15
 8001b9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2b      	ldr	r2, [pc, #172]	; (8001c50 <HAL_I2S_Init+0x278>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_I2S_Init+0x1d4>
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_I2S_Init+0x27c>)
 8001baa:	e001      	b.n	8001bb0 <HAL_I2S_Init+0x1d8>
 8001bac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a25      	ldr	r2, [pc, #148]	; (8001c50 <HAL_I2S_Init+0x278>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_I2S_Init+0x1ea>
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_I2S_Init+0x27c>)
 8001bc0:	e001      	b.n	8001bc6 <HAL_I2S_Init+0x1ee>
 8001bc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bd2:	d003      	beq.n	8001bdc <HAL_I2S_Init+0x204>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	e001      	b.n	8001be8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	897b      	ldrh	r3, [r7, #10]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <HAL_I2S_Init+0x278>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d101      	bne.n	8001c24 <HAL_I2S_Init+0x24c>
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_I2S_Init+0x27c>)
 8001c22:	e001      	b.n	8001c28 <HAL_I2S_Init+0x250>
 8001c24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c28:	897a      	ldrh	r2, [r7, #10]
 8001c2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	08001d4f 	.word	0x08001d4f
 8001c48:	cccccccd 	.word	0xcccccccd
 8001c4c:	08002179 	.word	0x08002179
 8001c50:	40003800 	.word	0x40003800
 8001c54:	40003400 	.word	0x40003400

08001c58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	1c9a      	adds	r2, r3, #2
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10e      	bne.n	8001ce8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001cd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffb8 	bl	8001c58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ce8:	bf00      	nop
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	b292      	uxth	r2, r2
 8001d04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	1c9a      	adds	r2, r3, #2
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	3b01      	subs	r3, #1
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10e      	bne.n	8001d46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff93 	bl	8001c6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d13a      	bne.n	8001de0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d109      	bne.n	8001d88 <I2S_IRQHandler+0x3a>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d7e:	2b40      	cmp	r3, #64	; 0x40
 8001d80:	d102      	bne.n	8001d88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7ff ffb4 	bl	8001cf0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d8e:	2b40      	cmp	r3, #64	; 0x40
 8001d90:	d126      	bne.n	8001de0 <I2S_IRQHandler+0x92>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b20      	cmp	r3, #32
 8001d9e:	d11f      	bne.n	8001de0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001dae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ff50 	bl	8001c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d136      	bne.n	8001e5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d109      	bne.n	8001e0a <I2S_IRQHandler+0xbc>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e00:	2b80      	cmp	r3, #128	; 0x80
 8001e02:	d102      	bne.n	8001e0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ff45 	bl	8001c94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b08      	cmp	r3, #8
 8001e12:	d122      	bne.n	8001e5a <I2S_IRQHandler+0x10c>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d11b      	bne.n	8001e5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001e30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	f043 0204 	orr.w	r2, r3, #4
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff13 	bl	8001c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d002      	beq.n	8001e90 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001e8e:	e160      	b.n	8002152 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e15a      	b.n	800215c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e152      	b.n	800215c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d002      	beq.n	8001ee2 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b05      	cmp	r3, #5
 8001ee0:	d114      	bne.n	8001f0c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8001ee2:	887b      	ldrh	r3, [r7, #2]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	865a      	strh	r2, [r3, #50]	; 0x32
 8001f0a:	e00b      	b.n	8001f24 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	887a      	ldrh	r2, [r7, #2]
 8001f22:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f36:	4a8b      	ldr	r2, [pc, #556]	; (8002164 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8001f38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	4a8a      	ldr	r2, [pc, #552]	; (8002168 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8001f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f46:	4a89      	ldr	r2, [pc, #548]	; (800216c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8001f48:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	2200      	movs	r2, #0
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	2200      	movs	r2, #0
 8001f58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5e:	4a83      	ldr	r2, [pc, #524]	; (800216c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8001f60:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f6c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f74:	d002      	beq.n	8001f7c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d16b      	bne.n	8002054 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8001f7c:	1d3b      	adds	r3, r7, #4
 8001f7e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a79      	ldr	r2, [pc, #484]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d101      	bne.n	8001f92 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8001f8e:	4b79      	ldr	r3, [pc, #484]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001f90:	e001      	b.n	8001f96 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8001f92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f96:	330c      	adds	r3, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	f7ff f8d2 	bl	800114c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a70      	ldr	r2, [pc, #448]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8001fb2:	4b70      	ldr	r3, [pc, #448]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001fb4:	e001      	b.n	8001fba <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8001fb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	496b      	ldr	r1, [pc, #428]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8001fc2:	428b      	cmp	r3, r1
 8001fc4:	d101      	bne.n	8001fca <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8001fc6:	4b6b      	ldr	r3, [pc, #428]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8001fc8:	e001      	b.n	8001fce <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8001fca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6819      	ldr	r1, [r3, #0]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	330c      	adds	r3, #12
 8001fe8:	461a      	mov	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f7ff f8ac 	bl	800114c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0202 	orr.w	r2, r2, #2
 8002002:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002012:	f000 809e 	beq.w	8002152 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a55      	ldr	r2, [pc, #340]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d101      	bne.n	8002024 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002020:	4b54      	ldr	r3, [pc, #336]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002022:	e001      	b.n	8002028 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4950      	ldr	r1, [pc, #320]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002030:	428b      	cmp	r3, r1
 8002032:	d101      	bne.n	8002038 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002034:	4b4f      	ldr	r3, [pc, #316]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002036:	e001      	b.n	800203c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800203c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002040:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002050:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002052:	e07e      	b.n	8002152 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002062:	d10a      	bne.n	800207a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002064:	2300      	movs	r3, #0
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6819      	ldr	r1, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a38      	ldr	r2, [pc, #224]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002092:	4b38      	ldr	r3, [pc, #224]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002094:	e001      	b.n	800209a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800209a:	330c      	adds	r3, #12
 800209c:	461a      	mov	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	f7ff f852 	bl	800114c <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80020b4:	e001      	b.n	80020ba <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80020b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	492b      	ldr	r1, [pc, #172]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80020c2:	428b      	cmp	r3, r1
 80020c4:	d101      	bne.n	80020ca <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80020c8:	e001      	b.n	80020ce <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80020ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020ce:	f042 0202 	orr.w	r2, r2, #2
 80020d2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	330c      	adds	r3, #12
 80020e2:	4619      	mov	r1, r3
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	f7ff f82d 	bl	800114c <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002110:	d01e      	beq.n	8002150 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d101      	bne.n	8002120 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800211e:	e001      	b.n	8002124 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4911      	ldr	r1, [pc, #68]	; (8002170 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d101      	bne.n	8002134 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002130:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002132:	e001      	b.n	8002138 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002138:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800213c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	69da      	ldr	r2, [r3, #28]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800214c:	61da      	str	r2, [r3, #28]
 800214e:	e000      	b.n	8002152 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002150:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800215a:	7ffb      	ldrb	r3, [r7, #31]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3720      	adds	r7, #32
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	08002421 	.word	0x08002421
 8002168:	0800243d 	.word	0x0800243d
 800216c:	08002515 	.word	0x08002515
 8002170:	40003800 	.word	0x40003800
 8002174:	40003400 	.word	0x40003400

08002178 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4aa2      	ldr	r2, [pc, #648]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d101      	bne.n	8002196 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002192:	4ba2      	ldr	r3, [pc, #648]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002194:	e001      	b.n	800219a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a9b      	ldr	r2, [pc, #620]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80021b0:	4b9a      	ldr	r3, [pc, #616]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80021b2:	e001      	b.n	80021b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80021b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c4:	d004      	beq.n	80021d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f040 8099 	bne.w	8002302 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d107      	bne.n	80021ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f9d5 	bl	8002594 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d107      	bne.n	8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa78 	bl	80026f4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d13a      	bne.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d035      	beq.n	8002284 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002222:	4b7e      	ldr	r3, [pc, #504]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002224:	e001      	b.n	800222a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002226:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4979      	ldr	r1, [pc, #484]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002232:	428b      	cmp	r3, r1
 8002234:	d101      	bne.n	800223a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002236:	4b79      	ldr	r3, [pc, #484]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002238:	e001      	b.n	800223e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800223a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800223e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002242:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002252:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f043 0202 	orr.w	r2, r3, #2
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fcfe 	bl	8001c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b08      	cmp	r3, #8
 800228c:	f040 80be 	bne.w	800240c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80b8 	beq.w	800240c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a59      	ldr	r2, [pc, #356]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80022b6:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022b8:	e001      	b.n	80022be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80022ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4954      	ldr	r1, [pc, #336]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80022c6:	428b      	cmp	r3, r1
 80022c8:	d101      	bne.n	80022ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80022ca:	4b54      	ldr	r3, [pc, #336]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80022cc:	e001      	b.n	80022d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80022ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022d8:	2300      	movs	r3, #0
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f043 0204 	orr.w	r2, r3, #4
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff fcc0 	bl	8001c80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002300:	e084      	b.n	800240c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b02      	cmp	r3, #2
 800230a:	d107      	bne.n	800231c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 f96e 	bl	80025f8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d107      	bne.n	8002336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	d002      	beq.n	8002336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 f9ad 	bl	8002690 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d12f      	bne.n	80023a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0320 	and.w	r3, r3, #32
 8002346:	2b00      	cmp	r3, #0
 8002348:	d02a      	beq.n	80023a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002358:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2e      	ldr	r2, [pc, #184]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d101      	bne.n	8002368 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002364:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002366:	e001      	b.n	800236c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002368:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4929      	ldr	r1, [pc, #164]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002374:	428b      	cmp	r3, r1
 8002376:	d101      	bne.n	800237c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002378:	4b28      	ldr	r3, [pc, #160]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800237a:	e001      	b.n	8002380 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800237c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002380:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002384:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff fc70 	bl	8001c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d131      	bne.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02c      	beq.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a17      	ldr	r2, [pc, #92]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023c0:	e001      	b.n	80023c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80023c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4912      	ldr	r1, [pc, #72]	; (8002418 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ce:	428b      	cmp	r3, r1
 80023d0:	d101      	bne.n	80023d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023d4:	e001      	b.n	80023da <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80023d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023ee:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fc:	f043 0204 	orr.w	r2, r3, #4
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fc3b 	bl	8001c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800240a:	e000      	b.n	800240e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800240c:	bf00      	nop
}
 800240e:	bf00      	nop
 8002410:	3720      	adds	r7, #32
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40003800 	.word	0x40003800
 800241c:	40003400 	.word	0x40003400

08002420 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f7fe fa74 	bl	800091c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d155      	bne.n	80024fe <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800245c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002460:	d006      	beq.n	8002470 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11e      	bne.n	80024ae <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a25      	ldr	r2, [pc, #148]	; (800250c <I2SEx_TxRxDMACplt+0xd0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <I2SEx_TxRxDMACplt+0x42>
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <I2SEx_TxRxDMACplt+0xd4>)
 800247c:	e001      	b.n	8002482 <I2SEx_TxRxDMACplt+0x46>
 800247e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4920      	ldr	r1, [pc, #128]	; (800250c <I2SEx_TxRxDMACplt+0xd0>)
 800248a:	428b      	cmp	r3, r1
 800248c:	d101      	bne.n	8002492 <I2SEx_TxRxDMACplt+0x56>
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <I2SEx_TxRxDMACplt+0xd4>)
 8002490:	e001      	b.n	8002496 <I2SEx_TxRxDMACplt+0x5a>
 8002492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0202 	bic.w	r2, r2, #2
 80024aa:	605a      	str	r2, [r3, #4]
 80024ac:	e01d      	b.n	80024ea <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0201 	bic.w	r2, r2, #1
 80024bc:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <I2SEx_TxRxDMACplt+0xd0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d101      	bne.n	80024cc <I2SEx_TxRxDMACplt+0x90>
 80024c8:	4b11      	ldr	r3, [pc, #68]	; (8002510 <I2SEx_TxRxDMACplt+0xd4>)
 80024ca:	e001      	b.n	80024d0 <I2SEx_TxRxDMACplt+0x94>
 80024cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	490d      	ldr	r1, [pc, #52]	; (800250c <I2SEx_TxRxDMACplt+0xd0>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d101      	bne.n	80024e0 <I2SEx_TxRxDMACplt+0xa4>
 80024dc:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <I2SEx_TxRxDMACplt+0xd4>)
 80024de:	e001      	b.n	80024e4 <I2SEx_TxRxDMACplt+0xa8>
 80024e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024e4:	f022 0202 	bic.w	r2, r2, #2
 80024e8:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2200      	movs	r2, #0
 80024f4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7fe fa1c 	bl	800093c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002504:	bf00      	nop
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40003800 	.word	0x40003800
 8002510:	40003400 	.word	0x40003400

08002514 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002520:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0203 	bic.w	r2, r2, #3
 8002530:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a15      	ldr	r2, [pc, #84]	; (800258c <I2SEx_TxRxDMAError+0x78>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <I2SEx_TxRxDMAError+0x2c>
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <I2SEx_TxRxDMAError+0x7c>)
 800253e:	e001      	b.n	8002544 <I2SEx_TxRxDMAError+0x30>
 8002540:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4910      	ldr	r1, [pc, #64]	; (800258c <I2SEx_TxRxDMAError+0x78>)
 800254c:	428b      	cmp	r3, r1
 800254e:	d101      	bne.n	8002554 <I2SEx_TxRxDMAError+0x40>
 8002550:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <I2SEx_TxRxDMAError+0x7c>)
 8002552:	e001      	b.n	8002558 <I2SEx_TxRxDMAError+0x44>
 8002554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002558:	f022 0203 	bic.w	r2, r2, #3
 800255c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f043 0208 	orr.w	r2, r3, #8
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff fb7e 	bl	8001c80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002584:	bf00      	nop
 8002586:	3710      	adds	r7, #16
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40003800 	.word	0x40003800
 8002590:	40003400 	.word	0x40003400

08002594 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c99      	adds	r1, r3, #2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6251      	str	r1, [r2, #36]	; 0x24
 80025a6:	881a      	ldrh	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	3b01      	subs	r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d113      	bne.n	80025ee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d106      	bne.n	80025ee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fe f9a7 	bl	800093c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	1c99      	adds	r1, r3, #2
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6251      	str	r1, [r2, #36]	; 0x24
 800260a:	8819      	ldrh	r1, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <I2SEx_TxISR_I2SExt+0x90>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d101      	bne.n	800261a <I2SEx_TxISR_I2SExt+0x22>
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <I2SEx_TxISR_I2SExt+0x94>)
 8002618:	e001      	b.n	800261e <I2SEx_TxISR_I2SExt+0x26>
 800261a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800261e:	460a      	mov	r2, r1
 8002620:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a12      	ldr	r2, [pc, #72]	; (8002688 <I2SEx_TxISR_I2SExt+0x90>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <I2SEx_TxISR_I2SExt+0x50>
 8002644:	4b11      	ldr	r3, [pc, #68]	; (800268c <I2SEx_TxISR_I2SExt+0x94>)
 8002646:	e001      	b.n	800264c <I2SEx_TxISR_I2SExt+0x54>
 8002648:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	490d      	ldr	r1, [pc, #52]	; (8002688 <I2SEx_TxISR_I2SExt+0x90>)
 8002654:	428b      	cmp	r3, r1
 8002656:	d101      	bne.n	800265c <I2SEx_TxISR_I2SExt+0x64>
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <I2SEx_TxISR_I2SExt+0x94>)
 800265a:	e001      	b.n	8002660 <I2SEx_TxISR_I2SExt+0x68>
 800265c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002660:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002664:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d106      	bne.n	800267e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7fe f95f 	bl	800093c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40003800 	.word	0x40003800
 800268c:	40003400 	.word	0x40003400

08002690 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68d8      	ldr	r0, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	1c99      	adds	r1, r3, #2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80026a8:	b282      	uxth	r2, r0
 80026aa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026be:	b29b      	uxth	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d113      	bne.n	80026ec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026d2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d106      	bne.n	80026ec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe f928 	bl	800093c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a20      	ldr	r2, [pc, #128]	; (8002784 <I2SEx_RxISR_I2SExt+0x90>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <I2SEx_RxISR_I2SExt+0x16>
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <I2SEx_RxISR_I2SExt+0x94>)
 8002708:	e001      	b.n	800270e <I2SEx_RxISR_I2SExt+0x1a>
 800270a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800270e:	68d8      	ldr	r0, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	1c99      	adds	r1, r3, #2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	62d1      	str	r1, [r2, #44]	; 0x2c
 800271a:	b282      	uxth	r2, r0
 800271c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002722:	b29b      	uxth	r3, r3
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d121      	bne.n	800277a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <I2SEx_RxISR_I2SExt+0x90>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <I2SEx_RxISR_I2SExt+0x50>
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <I2SEx_RxISR_I2SExt+0x94>)
 8002742:	e001      	b.n	8002748 <I2SEx_RxISR_I2SExt+0x54>
 8002744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	490d      	ldr	r1, [pc, #52]	; (8002784 <I2SEx_RxISR_I2SExt+0x90>)
 8002750:	428b      	cmp	r3, r1
 8002752:	d101      	bne.n	8002758 <I2SEx_RxISR_I2SExt+0x64>
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <I2SEx_RxISR_I2SExt+0x94>)
 8002756:	e001      	b.n	800275c <I2SEx_RxISR_I2SExt+0x68>
 8002758:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002760:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002766:	b29b      	uxth	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d106      	bne.n	800277a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe f8e1 	bl	800093c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40003800 	.word	0x40003800
 8002788:	40003400 	.word	0x40003400

0800278c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e264      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d075      	beq.n	8002896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027aa:	4ba3      	ldr	r3, [pc, #652]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d00c      	beq.n	80027d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027b6:	4ba0      	ldr	r3, [pc, #640]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d112      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c2:	4b9d      	ldr	r3, [pc, #628]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d10b      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	4b99      	ldr	r3, [pc, #612]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d05b      	beq.n	8002894 <HAL_RCC_OscConfig+0x108>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d157      	bne.n	8002894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e23f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d106      	bne.n	8002800 <HAL_RCC_OscConfig+0x74>
 80027f2:	4b91      	ldr	r3, [pc, #580]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a90      	ldr	r2, [pc, #576]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e01d      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x98>
 800280a:	4b8b      	ldr	r3, [pc, #556]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a8a      	ldr	r2, [pc, #552]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4b88      	ldr	r3, [pc, #544]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a87      	ldr	r2, [pc, #540]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002820:	6013      	str	r3, [r2, #0]
 8002822:	e00b      	b.n	800283c <HAL_RCC_OscConfig+0xb0>
 8002824:	4b84      	ldr	r3, [pc, #528]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a83      	ldr	r2, [pc, #524]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800282a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a80      	ldr	r2, [pc, #512]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800283a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d013      	beq.n	800286c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fab6 	bl	8000db4 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe fab2 	bl	8000db4 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e204      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0xc0>
 800286a:	e014      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe faa2 	bl	8000db4 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fa9e 	bl	8000db4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e1f0      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0xe8>
 8002892:	e000      	b.n	8002896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d063      	beq.n	800296a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00b      	beq.n	80028c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d11c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d116      	bne.n	80028f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d005      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d001      	beq.n	80028de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e1c4      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028de:	4b56      	ldr	r3, [pc, #344]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4952      	ldr	r1, [pc, #328]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	e03a      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028fc:	4b4f      	ldr	r3, [pc, #316]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 80028fe:	2201      	movs	r2, #1
 8002900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fa57 	bl	8000db4 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800290a:	f7fe fa53 	bl	8000db4 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1a5      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	4b46      	ldr	r3, [pc, #280]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	4940      	ldr	r1, [pc, #256]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002938:	4313      	orrs	r3, r2
 800293a:	600b      	str	r3, [r1, #0]
 800293c:	e015      	b.n	800296a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b3f      	ldr	r3, [pc, #252]	; (8002a3c <HAL_RCC_OscConfig+0x2b0>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fa36 	bl	8000db4 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800294c:	f7fe fa32 	bl	8000db4 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e184      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f0      	bne.n	800294c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d030      	beq.n	80029d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d016      	beq.n	80029ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 8002980:	2201      	movs	r2, #1
 8002982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002984:	f7fe fa16 	bl	8000db4 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800298c:	f7fe fa12 	bl	8000db4 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e164      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0x200>
 80029aa:	e015      	b.n	80029d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_RCC_OscConfig+0x2b4>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b2:	f7fe f9ff 	bl	8000db4 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe f9fb 	bl	8000db4 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e14d      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80a0 	beq.w	8002b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10f      	bne.n	8002a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a0e      	ldr	r2, [pc, #56]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a16:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d121      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_RCC_OscConfig+0x2b8>)
 8002a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2e:	f7fe f9c1 	bl	8000db4 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a34:	e011      	b.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
 8002a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a48:	f7fe f9b4 	bl	8000db4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e106      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b85      	ldr	r3, [pc, #532]	; (8002c70 <HAL_RCC_OscConfig+0x4e4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d106      	bne.n	8002a7c <HAL_RCC_OscConfig+0x2f0>
 8002a6e:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a72:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x312>
 8002a84:	4b7b      	ldr	r3, [pc, #492]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a88:	4a7a      	ldr	r2, [pc, #488]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a90:	4b78      	ldr	r3, [pc, #480]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a94:	4a77      	ldr	r2, [pc, #476]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x32a>
 8002a9e:	4b75      	ldr	r3, [pc, #468]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a74      	ldr	r2, [pc, #464]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	4b72      	ldr	r3, [pc, #456]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aae:	4a71      	ldr	r2, [pc, #452]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abe:	f7fe f979 	bl	8000db4 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe f975 	bl	8000db4 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0c5      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x33a>
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe f963 	bl	8000db4 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7fe f95f 	bl	8000db4 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e0af      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b5a      	ldr	r3, [pc, #360]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a55      	ldr	r2, [pc, #340]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 809b 	beq.w	8002c66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b30:	4b50      	ldr	r3, [pc, #320]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d05c      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d141      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b4c      	ldr	r3, [pc, #304]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe f933 	bl	8000db4 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe f92f 	bl	8000db4 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e081      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69da      	ldr	r2, [r3, #28]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	019b      	lsls	r3, r3, #6
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	4937      	ldr	r1, [pc, #220]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f908 	bl	8000db4 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe f904 	bl	8000db4 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e056      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bba:	4b2e      	ldr	r3, [pc, #184]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x41c>
 8002bc6:	e04e      	b.n	8002c66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_OscConfig+0x4ec>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bce:	f7fe f8f1 	bl	8000db4 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd4:	e008      	b.n	8002be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd6:	f7fe f8ed 	bl	8000db4 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d901      	bls.n	8002be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e03f      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be8:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1f0      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002bf4:	e037      	b.n	8002c66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e032      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c02:	4b1c      	ldr	r3, [pc, #112]	; (8002c74 <HAL_RCC_OscConfig+0x4e8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d028      	beq.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d121      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d11a      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d111      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	085b      	lsrs	r3, r3, #1
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3718      	adds	r7, #24
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40007000 	.word	0x40007000
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470060 	.word	0x42470060

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0cc      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b68      	ldr	r3, [pc, #416]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d90c      	bls.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b65      	ldr	r3, [pc, #404]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ca6:	4b63      	ldr	r3, [pc, #396]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0307 	and.w	r3, r3, #7
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e0b8      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d020      	beq.n	8002d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cd0:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	4a58      	ldr	r2, [pc, #352]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d005      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ce8:	4b53      	ldr	r3, [pc, #332]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a52      	ldr	r2, [pc, #328]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf4:	4b50      	ldr	r3, [pc, #320]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	494d      	ldr	r1, [pc, #308]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d044      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d119      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4a:	4b3b      	ldr	r3, [pc, #236]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e067      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4934      	ldr	r1, [pc, #208]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe f822 	bl	8000db4 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7fe f81e 	bl	8000db4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04f      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b2b      	ldr	r3, [pc, #172]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b25      	ldr	r3, [pc, #148]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d20c      	bcs.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e032      	b.n	8002e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0304 	and.w	r3, r3, #4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4916      	ldr	r1, [pc, #88]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	4313      	orrs	r3, r2
 8002de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d009      	beq.n	8002e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e02:	f000 f821 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002e06:	4602      	mov	r2, r0
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	490a      	ldr	r1, [pc, #40]	; (8002e3c <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	5ccb      	ldrb	r3, [r1, r3]
 8002e16:	fa22 f303 	lsr.w	r3, r2, r3
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1c8>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd ff82 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40023c00 	.word	0x40023c00
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	080034d4 	.word	0x080034d4
 8002e40:	20000028 	.word	0x20000028
 8002e44:	2000002c 	.word	0x2000002c

08002e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	607b      	str	r3, [r7, #4]
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	2300      	movs	r3, #0
 8002e5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e60:	4b67      	ldr	r3, [pc, #412]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f003 030c 	and.w	r3, r3, #12
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d00d      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x40>
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	f200 80bd 	bhi.w	8002fec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0x34>
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d003      	beq.n	8002e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e7a:	e0b7      	b.n	8002fec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e7c:	4b61      	ldr	r3, [pc, #388]	; (8003004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e7e:	60bb      	str	r3, [r7, #8]
       break;
 8002e80:	e0b7      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e82:	4b61      	ldr	r3, [pc, #388]	; (8003008 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002e84:	60bb      	str	r3, [r7, #8]
      break;
 8002e86:	e0b4      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e88:	4b5d      	ldr	r3, [pc, #372]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e92:	4b5b      	ldr	r3, [pc, #364]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d04d      	beq.n	8002f3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9e:	4b58      	ldr	r3, [pc, #352]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002eae:	f04f 0100 	mov.w	r1, #0
 8002eb2:	ea02 0800 	and.w	r8, r2, r0
 8002eb6:	ea03 0901 	and.w	r9, r3, r1
 8002eba:	4640      	mov	r0, r8
 8002ebc:	4649      	mov	r1, r9
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	014b      	lsls	r3, r1, #5
 8002ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ecc:	0142      	lsls	r2, r0, #5
 8002ece:	4610      	mov	r0, r2
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	ebb0 0008 	subs.w	r0, r0, r8
 8002ed6:	eb61 0109 	sbc.w	r1, r1, r9
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	018b      	lsls	r3, r1, #6
 8002ee4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ee8:	0182      	lsls	r2, r0, #6
 8002eea:	1a12      	subs	r2, r2, r0
 8002eec:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef0:	f04f 0000 	mov.w	r0, #0
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	00d9      	lsls	r1, r3, #3
 8002efa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002efe:	00d0      	lsls	r0, r2, #3
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	eb12 0208 	adds.w	r2, r2, r8
 8002f08:	eb43 0309 	adc.w	r3, r3, r9
 8002f0c:	f04f 0000 	mov.w	r0, #0
 8002f10:	f04f 0100 	mov.w	r1, #0
 8002f14:	0259      	lsls	r1, r3, #9
 8002f16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002f1a:	0250      	lsls	r0, r2, #9
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	461a      	mov	r2, r3
 8002f28:	f04f 0300 	mov.w	r3, #0
 8002f2c:	f7fd f954 	bl	80001d8 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4613      	mov	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e04a      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3a:	4b31      	ldr	r3, [pc, #196]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	099b      	lsrs	r3, r3, #6
 8002f40:	461a      	mov	r2, r3
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002f4a:	f04f 0100 	mov.w	r1, #0
 8002f4e:	ea02 0400 	and.w	r4, r2, r0
 8002f52:	ea03 0501 	and.w	r5, r3, r1
 8002f56:	4620      	mov	r0, r4
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	014b      	lsls	r3, r1, #5
 8002f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f68:	0142      	lsls	r2, r0, #5
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	1b00      	subs	r0, r0, r4
 8002f70:	eb61 0105 	sbc.w	r1, r1, r5
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	018b      	lsls	r3, r1, #6
 8002f7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f82:	0182      	lsls	r2, r0, #6
 8002f84:	1a12      	subs	r2, r2, r0
 8002f86:	eb63 0301 	sbc.w	r3, r3, r1
 8002f8a:	f04f 0000 	mov.w	r0, #0
 8002f8e:	f04f 0100 	mov.w	r1, #0
 8002f92:	00d9      	lsls	r1, r3, #3
 8002f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002f98:	00d0      	lsls	r0, r2, #3
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	1912      	adds	r2, r2, r4
 8002fa0:	eb45 0303 	adc.w	r3, r5, r3
 8002fa4:	f04f 0000 	mov.w	r0, #0
 8002fa8:	f04f 0100 	mov.w	r1, #0
 8002fac:	0299      	lsls	r1, r3, #10
 8002fae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fb2:	0290      	lsls	r0, r2, #10
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	f7fd f908 	bl	80001d8 <__aeabi_uldivmod>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4613      	mov	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fd0:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fe8:	60bb      	str	r3, [r7, #8]
      break;
 8002fea:	e002      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fec:	4b05      	ldr	r3, [pc, #20]	; (8003004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002fee:	60bb      	str	r3, [r7, #8]
      break;
 8002ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff2:	68bb      	ldr	r3, [r7, #8]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ffe:	bf00      	nop
 8003000:	40023800 	.word	0x40023800
 8003004:	00f42400 	.word	0x00f42400
 8003008:	007a1200 	.word	0x007a1200

0800300c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d105      	bne.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003030:	2b00      	cmp	r3, #0
 8003032:	d038      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800303a:	f7fd febb 	bl	8000db4 <HAL_GetTick>
 800303e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003042:	f7fd feb7 	bl	8000db4 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e0bd      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003054:	4b61      	ldr	r3, [pc, #388]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f0      	bne.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	019b      	lsls	r3, r3, #6
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	071b      	lsls	r3, r3, #28
 8003072:	495a      	ldr	r1, [pc, #360]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800307a:	4b57      	ldr	r3, [pc, #348]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003080:	f7fd fe98 	bl	8000db4 <HAL_GetTick>
 8003084:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003086:	e008      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003088:	f7fd fe94 	bl	8000db4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e09a      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800309a:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f000 8083 	beq.w	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030b4:	2300      	movs	r3, #0
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	4b48      	ldr	r3, [pc, #288]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030bc:	4a47      	ldr	r2, [pc, #284]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c2:	6413      	str	r3, [r2, #64]	; 0x40
 80030c4:	4b45      	ldr	r3, [pc, #276]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80030d0:	4b43      	ldr	r3, [pc, #268]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a42      	ldr	r2, [pc, #264]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030da:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030dc:	f7fd fe6a 	bl	8000db4 <HAL_GetTick>
 80030e0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030e4:	f7fd fe66 	bl	8000db4 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e06c      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030f6:	4b3a      	ldr	r3, [pc, #232]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003102:	4b36      	ldr	r3, [pc, #216]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800310a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d02f      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	429a      	cmp	r2, r3
 800311e:	d028      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003120:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800312a:	4b2e      	ldr	r3, [pc, #184]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003130:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003136:	4a29      	ldr	r2, [pc, #164]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b01      	cmp	r3, #1
 8003146:	d114      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003148:	f7fd fe34 	bl	8000db4 <HAL_GetTick>
 800314c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800314e:	e00a      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fd fe30 	bl	8000db4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e034      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317e:	d10d      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	4911      	ldr	r1, [pc, #68]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
 800319a:	e005      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a0e      	ldr	r2, [pc, #56]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031a6:	6093      	str	r3, [r2, #8]
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	4909      	ldr	r1, [pc, #36]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7d1a      	ldrb	r2, [r3, #20]
 80031ca:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80031cc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	42470068 	.word	0x42470068
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40007000 	.word	0x40007000
 80031e4:	42470e40 	.word	0x42470e40
 80031e8:	424711e0 	.word	0x424711e0

080031ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d140      	bne.n	800328c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800320a:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d131      	bne.n	8003284 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003222:	617b      	str	r3, [r7, #20]
          break;
 8003224:	e031      	b.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003232:	d109      	bne.n	8003248 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003234:	4b19      	ldr	r3, [pc, #100]	; (800329c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800323e:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	e008      	b.n	800325a <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800325c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800326e:	4b0b      	ldr	r3, [pc, #44]	; (800329c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003274:	0f1b      	lsrs	r3, r3, #28
 8003276:	f003 0307 	and.w	r3, r3, #7
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
          break;
 8003282:	e002      	b.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	617b      	str	r3, [r7, #20]
          break;
 8003288:	bf00      	nop
        }
      }
      break;
 800328a:	bf00      	nop
    }
  }
  return frequency;
 800328c:	697b      	ldr	r3, [r7, #20]
}
 800328e:	4618      	mov	r0, r3
 8003290:	371c      	adds	r7, #28
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	00bb8000 	.word	0x00bb8000
 80032a4:	007a1200 	.word	0x007a1200
 80032a8:	00f42400 	.word	0x00f42400

080032ac <arm_biquad_cascade_df1_init_f32>:
 80032ac:	b538      	push	{r3, r4, r5, lr}
 80032ae:	4604      	mov	r4, r0
 80032b0:	6082      	str	r2, [r0, #8]
 80032b2:	6001      	str	r1, [r0, #0]
 80032b4:	461d      	mov	r5, r3
 80032b6:	010a      	lsls	r2, r1, #4
 80032b8:	4618      	mov	r0, r3
 80032ba:	2100      	movs	r1, #0
 80032bc:	f000 f8f6 	bl	80034ac <memset>
 80032c0:	6065      	str	r5, [r4, #4]
 80032c2:	bd38      	pop	{r3, r4, r5, pc}

080032c4 <arm_biquad_cascade_df1_f32>:
 80032c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80032c8:	ed2d 8b02 	vpush	{d8}
 80032cc:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80032d0:	6886      	ldr	r6, [r0, #8]
 80032d2:	6845      	ldr	r5, [r0, #4]
 80032d4:	6807      	ldr	r7, [r0, #0]
 80032d6:	4696      	mov	lr, r2
 80032d8:	ea4f 180c 	mov.w	r8, ip, lsl #4
 80032dc:	f003 0203 	and.w	r2, r3, #3
 80032e0:	eb0e 0908 	add.w	r9, lr, r8
 80032e4:	3614      	adds	r6, #20
 80032e6:	3510      	adds	r5, #16
 80032e8:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 80032ec:	ed56 1a04 	vldr	s3, [r6, #-16]
 80032f0:	ed16 1a03 	vldr	s2, [r6, #-12]
 80032f4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80032f8:	ed16 0a01 	vldr	s0, [r6, #-4]
 80032fc:	ed15 8a04 	vldr	s16, [r5, #-16]
 8003300:	ed55 8a03 	vldr	s17, [r5, #-12]
 8003304:	ed15 7a02 	vldr	s14, [r5, #-8]
 8003308:	ed55 7a01 	vldr	s15, [r5, #-4]
 800330c:	f1bc 0f00 	cmp.w	ip, #0
 8003310:	f000 80a5 	beq.w	800345e <arm_biquad_cascade_df1_f32+0x19a>
 8003314:	f101 0010 	add.w	r0, r1, #16
 8003318:	f10e 0310 	add.w	r3, lr, #16
 800331c:	4664      	mov	r4, ip
 800331e:	ed50 3a04 	vldr	s7, [r0, #-16]
 8003322:	ee21 6a88 	vmul.f32	s12, s3, s16
 8003326:	ee22 5a23 	vmul.f32	s10, s4, s7
 800332a:	ee61 8a28 	vmul.f32	s17, s2, s17
 800332e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8003332:	ee60 6a87 	vmul.f32	s13, s1, s14
 8003336:	ee36 6a28 	vadd.f32	s12, s12, s17
 800333a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800333e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003342:	ee61 6aa3 	vmul.f32	s13, s3, s7
 8003346:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800334a:	ee21 8a08 	vmul.f32	s16, s2, s16
 800334e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8003352:	ed50 2a03 	vldr	s5, [r0, #-12]
 8003356:	ee22 6a22 	vmul.f32	s12, s4, s5
 800335a:	ee60 5aa7 	vmul.f32	s11, s1, s15
 800335e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8003362:	ee20 7a07 	vmul.f32	s14, s0, s14
 8003366:	ee76 6a08 	vadd.f32	s13, s12, s16
 800336a:	ee21 3aa2 	vmul.f32	s6, s3, s5
 800336e:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8003372:	ee21 8a23 	vmul.f32	s16, s2, s7
 8003376:	ee36 7a87 	vadd.f32	s14, s13, s14
 800337a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800337e:	ed03 7a03 	vstr	s14, [r3, #-12]
 8003382:	ed50 8a02 	vldr	s17, [r0, #-8]
 8003386:	ee62 3a28 	vmul.f32	s7, s4, s17
 800338a:	ee20 6a87 	vmul.f32	s12, s1, s14
 800338e:	ee33 3a83 	vadd.f32	s6, s7, s6
 8003392:	ee21 4aa8 	vmul.f32	s8, s3, s17
 8003396:	ee73 6a08 	vadd.f32	s13, s6, s16
 800339a:	ee61 2a22 	vmul.f32	s5, s2, s5
 800339e:	ee76 6a86 	vadd.f32	s13, s13, s12
 80033a2:	ee20 7a07 	vmul.f32	s14, s0, s14
 80033a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033aa:	3c01      	subs	r4, #1
 80033ac:	ed43 7a02 	vstr	s15, [r3, #-8]
 80033b0:	ed10 8a01 	vldr	s16, [r0, #-4]
 80033b4:	ee62 3a08 	vmul.f32	s7, s4, s16
 80033b8:	ee60 6aa7 	vmul.f32	s13, s1, s15
 80033bc:	ee73 3a84 	vadd.f32	s7, s7, s8
 80033c0:	f100 0010 	add.w	r0, r0, #16
 80033c4:	ee33 4aa2 	vadd.f32	s8, s7, s5
 80033c8:	f103 0310 	add.w	r3, r3, #16
 80033cc:	ee34 4a26 	vadd.f32	s8, s8, s13
 80033d0:	ee37 7a04 	vadd.f32	s14, s14, s8
 80033d4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80033d8:	d1a1      	bne.n	800331e <arm_biquad_cascade_df1_f32+0x5a>
 80033da:	4441      	add	r1, r8
 80033dc:	4648      	mov	r0, r9
 80033de:	b3aa      	cbz	r2, 800344c <arm_biquad_cascade_df1_f32+0x188>
 80033e0:	4613      	mov	r3, r2
 80033e2:	e003      	b.n	80033ec <arm_biquad_cascade_df1_f32+0x128>
 80033e4:	eeb0 7a45 	vmov.f32	s14, s10
 80033e8:	eeb0 8a43 	vmov.f32	s16, s6
 80033ec:	ecb1 3a01 	vldmia	r1!, {s6}
 80033f0:	ee21 6a88 	vmul.f32	s12, s3, s16
 80033f4:	ee62 3a03 	vmul.f32	s7, s4, s6
 80033f8:	ee61 8a28 	vmul.f32	s17, s2, s17
 80033fc:	ee33 4a86 	vadd.f32	s8, s7, s12
 8003400:	ee60 4a87 	vmul.f32	s9, s1, s14
 8003404:	ee34 6a28 	vadd.f32	s12, s8, s17
 8003408:	ee60 7a27 	vmul.f32	s15, s0, s15
 800340c:	ee76 4a24 	vadd.f32	s9, s12, s9
 8003410:	3b01      	subs	r3, #1
 8003412:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8003416:	eef0 8a48 	vmov.f32	s17, s16
 800341a:	eef0 7a47 	vmov.f32	s15, s14
 800341e:	eca0 5a01 	vstmia	r0!, {s10}
 8003422:	d1df      	bne.n	80033e4 <arm_biquad_cascade_df1_f32+0x120>
 8003424:	3f01      	subs	r7, #1
 8003426:	ed05 3a04 	vstr	s6, [r5, #-16]
 800342a:	ed05 8a03 	vstr	s16, [r5, #-12]
 800342e:	ed05 5a02 	vstr	s10, [r5, #-8]
 8003432:	ed05 7a01 	vstr	s14, [r5, #-4]
 8003436:	f106 0614 	add.w	r6, r6, #20
 800343a:	f105 0510 	add.w	r5, r5, #16
 800343e:	4671      	mov	r1, lr
 8003440:	f47f af52 	bne.w	80032e8 <arm_biquad_cascade_df1_f32+0x24>
 8003444:	ecbd 8b02 	vpop	{d8}
 8003448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800344c:	eeb0 5a47 	vmov.f32	s10, s14
 8003450:	eeb0 3a48 	vmov.f32	s6, s16
 8003454:	eeb0 7a67 	vmov.f32	s14, s15
 8003458:	eeb0 8a68 	vmov.f32	s16, s17
 800345c:	e7e2      	b.n	8003424 <arm_biquad_cascade_df1_f32+0x160>
 800345e:	4670      	mov	r0, lr
 8003460:	e7bd      	b.n	80033de <arm_biquad_cascade_df1_f32+0x11a>
 8003462:	bf00      	nop

08003464 <__libc_init_array>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	4d0d      	ldr	r5, [pc, #52]	; (800349c <__libc_init_array+0x38>)
 8003468:	4c0d      	ldr	r4, [pc, #52]	; (80034a0 <__libc_init_array+0x3c>)
 800346a:	1b64      	subs	r4, r4, r5
 800346c:	10a4      	asrs	r4, r4, #2
 800346e:	2600      	movs	r6, #0
 8003470:	42a6      	cmp	r6, r4
 8003472:	d109      	bne.n	8003488 <__libc_init_array+0x24>
 8003474:	4d0b      	ldr	r5, [pc, #44]	; (80034a4 <__libc_init_array+0x40>)
 8003476:	4c0c      	ldr	r4, [pc, #48]	; (80034a8 <__libc_init_array+0x44>)
 8003478:	f000 f820 	bl	80034bc <_init>
 800347c:	1b64      	subs	r4, r4, r5
 800347e:	10a4      	asrs	r4, r4, #2
 8003480:	2600      	movs	r6, #0
 8003482:	42a6      	cmp	r6, r4
 8003484:	d105      	bne.n	8003492 <__libc_init_array+0x2e>
 8003486:	bd70      	pop	{r4, r5, r6, pc}
 8003488:	f855 3b04 	ldr.w	r3, [r5], #4
 800348c:	4798      	blx	r3
 800348e:	3601      	adds	r6, #1
 8003490:	e7ee      	b.n	8003470 <__libc_init_array+0xc>
 8003492:	f855 3b04 	ldr.w	r3, [r5], #4
 8003496:	4798      	blx	r3
 8003498:	3601      	adds	r6, #1
 800349a:	e7f2      	b.n	8003482 <__libc_init_array+0x1e>
 800349c:	080034f4 	.word	0x080034f4
 80034a0:	080034f4 	.word	0x080034f4
 80034a4:	080034f4 	.word	0x080034f4
 80034a8:	080034f8 	.word	0x080034f8

080034ac <memset>:
 80034ac:	4402      	add	r2, r0
 80034ae:	4603      	mov	r3, r0
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d100      	bne.n	80034b6 <memset+0xa>
 80034b4:	4770      	bx	lr
 80034b6:	f803 1b01 	strb.w	r1, [r3], #1
 80034ba:	e7f9      	b.n	80034b0 <memset+0x4>

080034bc <_init>:
 80034bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034be:	bf00      	nop
 80034c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c2:	bc08      	pop	{r3}
 80034c4:	469e      	mov	lr, r3
 80034c6:	4770      	bx	lr

080034c8 <_fini>:
 80034c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ca:	bf00      	nop
 80034cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ce:	bc08      	pop	{r3}
 80034d0:	469e      	mov	lr, r3
 80034d2:	4770      	bx	lr
